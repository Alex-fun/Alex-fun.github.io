<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hejx's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-02-27T04:43:51.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Hejx]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[理解Object.keys()]]></title>
    <link href="http://yoursite.com/2016/02/27/%E7%90%86%E8%A7%A3Object-keys/"/>
    <id>http://yoursite.com/2016/02/27/理解Object-keys/</id>
    <published>2016-02-27T04:43:51.000Z</published>
    <updated>2016-02-27T04:43:51.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用命令]]></title>
    <link href="http://yoursite.com/2016/02/26/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/02/26/常用命令/</id>
    <published>2016-02-25T16:25:34.000Z</published>
    <updated>2016-02-27T05:58:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、ls">1、ls</h3><p>ls最常用的参数有三个： -a -l -F。</p>
<p>ls –a</p>
<p>Linux上的文件以.开头的文件被系统视为隐藏文件，仅用ls命令是看不到他们的，而用ls -a除了显示一般文件名外，连隐藏文件也会显示出来。</p>
<p>ls –l</p>
<p>该参数显示更详细的文件信息。</p>
<p>ls –F</p>
<p>使用这个参数表示在文件的后面多添加表示文件类型的符号，例如*表示可执行，/表示目录，@表示连结文件，这都是因为使用了-F这个参数。但是现在基本上所有的Linux发行版本的ls都已经内建了-F参数，也就是说，不用输入这个参数，我们也能看到各种分辨符号。<br><a id="more"></a></p>
<h3 id="2、cd">2、cd</h3><p>cd aaa 进入aaa目录</p>
<p>cd    命令后不指定目录，会切换到当前用户的home 目录</p>
<p>cd ~  作用同cd后不指定目录，切换到当前用户的home 目录</p>
<p>cd -  命令后跟一个减号，则会退回到切换前的目录</p>
<p>cd .. 返回到当前目录下的上一级目录</p>
<h3 id="3、pwd">3、pwd</h3><p>用于显示用户当前工作目录</p>
<h3 id="4、mkdir">4、mkdir</h3><p>用于创建目录</p>
<p>-p参数，若指定路径的父目录不存在则一并创建</p>
<h3 id="5、cp复制命令">5、cp复制命令</h3><p>复制一个文件到另一目录：cp 1.txt ../test2</p>
<p>复制一个文件到本目录并改名：cp 1.txt 2.txt</p>
<p>复制一个文件夹a并改名为b：cp -r a b</p>
<h3 id="6、mv移动命令">6、mv移动命令</h3><p>将一个文件移动到另一个目录：mv 1.txt ../test1</p>
<p>将一个文件在本目录改名：mv 1.txt 2.txt</p>
<p>将一个文件一定到另一个目录并改名：mv 1.txt ../test1/2.txt</p>
<h3 id="7、rm删除命令">7、rm删除命令</h3><p>rm命令常用的参数有三个：-i，-r，-f。</p>
<p>–i ：系统在删除文件之前会先询问确认，用户回车之后，文件才会真的被删除。需要注意，linux下删除的文件是不能恢复的，删除之前一定要谨慎确认。</p>
<p>–r：该参数支持目录删除，功能和rmdir命令相似。</p>
<p>–f：和-i参数相反，-f表示强制删除</p>
<p>-rf: 强制删除，慎用</p>
<h3 id="8、less查看文件">8、less查看文件</h3><p>v 调用vi编辑器</p>
<p>q 退出less</p>
<h3 id="9、clear">9、clear</h3><p>clear命令是用来清除当前屏幕显示的内容。</p>
<p><a href="http://blog.csdn.net/junmail/article/details/4602745" target="_blank" rel="external">无耻地摘自</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、ls">1、ls</h3><p>ls最常用的参数有三个： -a -l -F。</p>
<p>ls –a</p>
<p>Linux上的文件以.开头的文件被系统视为隐藏文件，仅用ls命令是看不到他们的，而用ls -a除了显示一般文件名外，连隐藏文件也会显示出来。</p>
<p>ls –l</p>
<p>该参数显示更详细的文件信息。</p>
<p>ls –F</p>
<p>使用这个参数表示在文件的后面多添加表示文件类型的符号，例如*表示可执行，/表示目录，@表示连结文件，这都是因为使用了-F这个参数。但是现在基本上所有的Linux发行版本的ls都已经内建了-F参数，也就是说，不用输入这个参数，我们也能看到各种分辨符号。<br>]]>
    
    </summary>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于javascript里的声明提前（hoisting）]]></title>
    <link href="http://yoursite.com/2016/02/25/%E5%85%B3%E4%BA%8Ejavascript%E9%87%8C%E7%9A%84%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%92%8C%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/"/>
    <id>http://yoursite.com/2016/02/25/关于javascript里的变量提升和函数提升/</id>
    <published>2016-02-25T13:52:47.000Z</published>
    <updated>2016-02-25T15:38:17.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>“声明提前”是在javascript引擎的“预编译”时进行的，也就是在代码开始运行之前。</p>
</blockquote>
<p>在函数里声明的所有变量（但不涉及赋值），都会被“提前”至函数体的顶部。在函数体内，局部变量的优先级高于同名的全局变量，如果在函数体内声明一个局部变量或者函数参数中带有的变量和全局变量同名，那么全局变量将会被局部变量覆盖。而给一个没有被声明的变量赋值，在非严谨模式下，等同于在全局范围创建了一个同名属性。</p>
<p>在脚本里，所有的函数包括嵌套的函数，都会在当前的上下文中其他代码之前声明。函数定义语句中的函数会被显式地“提前”（包括函数名和函数体），在脚本和函数内部都是可见的，因此可以被提前调用。而使用var的话（函数定义表达式），只有变量会被提前，变量的定义还在原来的位置。</p>
<a id="more"></a>
<h3 id="反面教材1">反面教材1</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">function</span><span class="list">(<span class="keyword">a</span>)</span><span class="collection">&#123;</span><br><span class="line">  console.log<span class="list">(<span class="keyword">a</span>)</span><span class="comment">; // 输出 function a()&#123;&#125;</span></span><br><span class="line">  var a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">  function a<span class="list">()</span><span class="collection">&#123;&#125;</span><span class="comment">;</span></span><br><span class="line">&#125;</span>)</span><span class="list">(<span class="number">100</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">function</span><span class="list">(<span class="keyword">a</span>)</span><span class="collection">&#123;</span><br><span class="line">  console.log<span class="list">(<span class="keyword">a</span>)</span><span class="comment">; // 输出 100</span></span><br><span class="line">  var a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">&#125;</span>)</span><span class="list">(<span class="number">100</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="反面教材2">反面教材2</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 functiong a()&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">g</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 undefined</span></span><br><span class="line"><span class="keyword">var</span> a = funciton()&#123;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="反面教材3">反面教材3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 输出 10</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 输出 undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 输出 20</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等于下面的</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a; </span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 输出 10</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 输出 undefined</span></span><br><span class="line">  a = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 输出 20</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>“声明提前”是在javascript引擎的“预编译”时进行的，也就是在代码开始运行之前。</p>
</blockquote>
<p>在函数里声明的所有变量（但不涉及赋值），都会被“提前”至函数体的顶部。在函数体内，局部变量的优先级高于同名的全局变量，如果在函数体内声明一个局部变量或者函数参数中带有的变量和全局变量同名，那么全局变量将会被局部变量覆盖。而给一个没有被声明的变量赋值，在非严谨模式下，等同于在全局范围创建了一个同名属性。</p>
<p>在脚本里，所有的函数包括嵌套的函数，都会在当前的上下文中其他代码之前声明。函数定义语句中的函数会被显式地“提前”（包括函数名和函数体），在脚本和函数内部都是可见的，因此可以被提前调用。而使用var的话（函数定义表达式），只有变量会被提前，变量的定义还在原来的位置。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MutationObserver]]></title>
    <link href="http://yoursite.com/2016/02/24/MutationObserver/"/>
    <id>http://yoursite.com/2016/02/24/MutationObserver/</id>
    <published>2016-02-24T05:28:51.000Z</published>
    <updated>2016-02-24T05:28:51.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解Object.create]]></title>
    <link href="http://yoursite.com/2016/02/20/%E7%90%86%E8%A7%A3Object-create/"/>
    <id>http://yoursite.com/2016/02/20/理解Object-create/</id>
    <published>2016-02-20T04:58:06.000Z</published>
    <updated>2016-02-24T14:28:44.000Z</updated>
    <content type="html"><![CDATA[<p>Object.create()方法是用来创建新的对象，并且可以指定原型（proto），和设定自身属性（propertiesObject）。如果指定的原型（proto）不是null或者一个对象值，将会抛出类型错误异常。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.<span class="function"><span class="title">create</span><span class="params">(proto[, propertiesObject])</span></span></span><br></pre></td></tr></table></figure>
<p>在js里，所有的端口都默认继承至Obejct，如果使用此方法创建一个对象，需要指定原型为Object.prototype，如果传入null的话，就不继承任何东西。<br><a id="more"></a></p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这3种创建对象都是等价的</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Obejct();</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// d 不继承任何东西</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.create(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h3 id="实现类式继承">实现类式继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x += x;</span><br><span class="line">  <span class="keyword">this</span>.y += y;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Move'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  Shape.call(<span class="keyword">this</span>, x, y); <span class="comment">//调用超类的构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(rect <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(rect <span class="keyword">instanceof</span> Shape); <span class="comment">// ture</span></span><br><span class="line">rect.move(<span class="number">10</span>, <span class="number">2</span>); <span class="comment">// Move</span></span><br></pre></td></tr></table></figure>
<h3 id="设置对象属性">设置对象属性</h3><p>所有属性特性默认为false</p>
<ul>
<li>writable 可写</li>
<li>configurable 可配置</li>
<li>enumerable 可枚举</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  baz: &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">'hello'</span>&#125;,</span><br><span class="line">	set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'set value '</span> + val)&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; p: &#123; value: <span class="number">42</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></span><br><span class="line">o.p = <span class="number">24</span></span><br><span class="line">o.p</span><br><span class="line"><span class="comment">//42</span></span><br><span class="line"></span><br><span class="line">o.q = <span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//"q"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> o.p</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h3 id="Polyfill">Polyfill</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.create != <span class="string">'function'</span>) &#123;</span><br><span class="line">  <span class="comment">// Production steps of ECMA-262, Edition 5, 15.2.3.5</span></span><br><span class="line">  <span class="comment">// Reference: http://es5.github.io/#x15.2.3.5</span></span><br><span class="line">  <span class="built_in">Object</span>.create = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为了节省内存，使用一个共享的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Object.prototype.hasOwnProperty 更安全的引用 </span></span><br><span class="line">    <span class="keyword">var</span> hasOwn = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">O</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 1. 如果 O 不是 Object 或 null，抛出一个 TypeError 异常。</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> O != <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">'Object prototype may only be an Object or null'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 使创建的一个新的对象为 obj ，就和通过</span></span><br><span class="line">      <span class="comment">//    new Object() 表达式创建一个新对象一样，</span></span><br><span class="line">      <span class="comment">//    Object是标准内置的构造器名</span></span><br><span class="line">      <span class="comment">// 3. 设置 obj 的内部属性 [[Prototype]] 为 O。</span></span><br><span class="line">      Temp.prototype = O;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="keyword">new</span> Temp();</span><br><span class="line">      Temp.prototype = <span class="literal">null</span>; <span class="comment">// 不要保持一个 O 的杂散引用（a stray reference）...</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. 如果存在参数 Properties ，而不是 undefined ，</span></span><br><span class="line">      <span class="comment">//    那么就把参数的自身属性添加到 obj 上，就像调用</span></span><br><span class="line">      <span class="comment">//    携带obj ，Properties两个参数的标准内置函数</span></span><br><span class="line">      <span class="comment">//    Object.defineProperties() 一样。</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Object.defineProperties does ToObject on its first argument.</span></span><br><span class="line">        <span class="keyword">var</span> Properties = <span class="built_in">Object</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> Properties) &#123;</span><br><span class="line">          <span class="keyword">if</span> (hasOwn.call(Properties, prop)) &#123;</span><br><span class="line">            obj[prop] = Properties[prop];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5. 返回 obj</span></span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="兼容性">兼容性</h3><ul>
<li>es5 Initial definition. Implemented in JavaScript 1.8.5.</li>
<li>es6 </li>
</ul>
<h5 id="浏览器：">浏览器：</h5><p>pc端： ie9+<br>移动端： 安卓和iOS都支持</p>
<h3 id="文献">文献</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">developer.mozilla.org</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Object.create()方法是用来创建新的对象，并且可以指定原型（proto），和设定自身属性（propertiesObject）。如果指定的原型（proto）不是null或者一个对象值，将会抛出类型错误异常。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.<span class="function"><span class="title">create</span><span class="params">(proto[, propertiesObject])</span></span></span><br></pre></td></tr></table></figure>
<p>在js里，所有的端口都默认继承至Obejct，如果使用此方法创建一个对象，需要指定原型为Object.prototype，如果传入null的话，就不继承任何东西。<br>]]>
    
    </summary>
    
      <category term="javascript-Object" scheme="http://yoursite.com/tags/javascript-Object/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解Object.assign]]></title>
    <link href="http://yoursite.com/2016/02/18/%E7%90%86%E8%A7%A3Object-assign/"/>
    <id>http://yoursite.com/2016/02/18/理解Object-assign/</id>
    <published>2016-02-18T14:13:13.000Z</published>
    <updated>2016-02-19T04:18:16.000Z</updated>
    <content type="html"><![CDATA[<p>Object.assign()方法用于从一个或多个源对象（sources）中拷贝所有可枚举的自有属性到目标对象（target），并返回目标对象。拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.<span class="function"><span class="title">assign</span><span class="params">(target, ...sources)</span></span></span><br></pre></td></tr></table></figure>
<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>
<blockquote>
<p>原文：Both String and Symbol properties are copied.</p>
</blockquote>
<p>String和Symbol类型都可被直接分配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果属性是只读的，那将会抛出异常，目标对象将会停止改变（而之前的改变会保留）。但是对于null或者undefind会直接忽略。</p>
<a id="more"></a>
<h3 id="简单克隆对象">简单克隆对象</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="comment">&#123;a: 1&#125;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">copy</span> = Object.assign(<span class="comment">&#123;&#125;</span>, obj);</span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">copy</span>); <span class="comment">//Object &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="合并对象">合并对象</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> a</span> = &#123;x: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> b</span> = &#123;y: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> c</span> = &#123;x: <span class="number">4</span>, z: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> obj</span> = Object.assign(a, b, c);</span><br><span class="line"></span><br><span class="line">console.log(obj); <span class="comment">//Object &#123;x: 4, y: 2, z: 3&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="拷贝Symbol属性">拷贝Symbol属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;x: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;[<span class="built_in">Symbol</span>(<span class="string">'y'</span>)]: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">//Object &#123;x: 1, Symbol(y): 2&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="继承的属性和不可枚举的属性不会被拷贝">继承的属性和不可枚举的属性不会被拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;foo: <span class="number">1</span>&#125;, <span class="comment">//继承的对象, obj.__proto__ == &#123;foo: 1&#125;</span></span><br><span class="line">	&#123;</span><br><span class="line">		a: &#123; <span class="comment">//不可枚举的</span></span><br><span class="line">			value: <span class="number">2</span></span><br><span class="line">		&#125;,</span><br><span class="line">		b: &#123;</span><br><span class="line">			value: <span class="number">3</span>,</span><br><span class="line">			enumerable: <span class="literal">true</span> <span class="comment">//可枚举的</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">//Object &#123;b: 3&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串会被转成object">字符串会被转成object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hejx'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">//Object &#123;0: "h", 1: "e", 2: "j", 3: "x"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Symbol</span>(<span class="string">'sy'</span>);</span><br><span class="line"><span class="keyword">var</span> e = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b, c, d, <span class="literal">null</span>, <span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">//null和undefined会被忽略，在这里只有a（字符串）可以被枚举并被转成对象，如果存在2个字符串，将会报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">//Object &#123;0: "1", 1: "2", 2: "3"&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="只读属性不能被拷贝">只读属性不能被拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">'foo'</span>, &#123;</span><br><span class="line">	value: <span class="number">1</span>,</span><br><span class="line"> 	writable: <span class="literal">false</span></span><br><span class="line">&#125;); <span class="comment">// target.foo是只读属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, &#123; bar: <span class="number">2</span> &#125;, &#123; foo2: <span class="number">3</span>, foo: <span class="number">3</span>, foo3: <span class="number">3</span> &#125;, &#123; baz: <span class="number">4</span> &#125;);</span><br><span class="line"><span class="comment">// 这里会抛出异常，但是在错误之前，目标对象的部分属性已经被改变或者新增，而后续的将不会再进行拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target.bar);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo2); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo3); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(target.baz);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="拷贝属性的赋值器（setter）和取值器（getter）">拷贝属性的赋值器（setter）和取值器（getter）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> obj</span> = &#123;</span><br><span class="line">	a: <span class="number">1</span>,</span><br><span class="line">	<span class="keyword">get</span> b()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	someMethod()&#123; <span class="comment">//同样会被拷贝，可以用于为对象添加方法</span></span><br><span class="line">		<span class="comment">//someMethod</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> copy</span> = Object.assign(&#123;&#125;, obj);</span><br><span class="line">console.log(copy); <span class="comment">// Object &#123;a: 1, b: 2, someMethod: function()&#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="es5版本的Object-assign">es5版本的Object.assign</h3><p>不支持Symbol属性，因为es5压根没有Symbol</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.assign != <span class="string">'function'</span>) &#123; <span class="comment">//判断是否支持</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign = <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line"><span class="pi">      'use strict'</span>;</span><br><span class="line">      <span class="keyword">if</span> (target === <span class="literal">undefined</span> || target === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> output = <span class="built_in">Object</span>(target);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">1</span>; index &lt; <span class="built_in">arguments</span>.length; index++) &#123;</span><br><span class="line">        <span class="keyword">var</span> source = <span class="built_in">arguments</span>[index];</span><br><span class="line">        <span class="keyword">if</span> (source !== <span class="literal">undefined</span> &amp;&amp; source !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> nextKey <span class="keyword">in</span> source) &#123;</span><br><span class="line">            <span class="keyword">if</span> (source.hasOwnProperty(nextKey)) &#123; <span class="comment">//判断一个属性是定义在对象本身而不是继承自原型链</span></span><br><span class="line">              output[nextKey] = source[nextKey];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> output; <span class="comment">//最终输出</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="不支持深度拷贝">不支持深度拷贝</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var target = &#123; <span class="string">a:</span> &#123; <span class="string">b:</span> <span class="string">'c'</span>, <span class="string">d:</span> <span class="string">'e'</span> &#125; &#125;</span><br><span class="line">var source = &#123; <span class="string">a:</span> &#123; <span class="string">b:</span> <span class="string">'hello'</span> &#125; &#125;</span><br><span class="line">Object.assign(target, source)</span><br><span class="line"><span class="comment">// &#123; a: &#123; b: 'hello' &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/sindresorhus/deep-assign" target="_blank" rel="external">深度拷贝</a></p>
<h3 id="拷贝数组">拷贝数组</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//会被当成对象</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> str</span> = <span class="string">"4567"</span>;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> copy</span> = Object.assign(&#123;&#125;, arr, str);</span><br><span class="line">console.log(copy); <span class="comment">// Object &#123;0: "4", 1: "5", 2: "6", 3: "7"&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="兼容性">兼容性</h3><p>属于es6规范，然而兼容性并不好，pc端除了ie，其他都支持。移动端目前就Firefox Mobile 支持。</p>
<h3 id="文献">文献</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">摘自developer.mozilla.org</a></p>
<p><a href="http://es6.ruanyifeng.com/#docs/object#Object-assign" target="_blank" rel="external">es6.ruanyifeng.com</a></p>
<p><a href="https://cnodejs.org/topic/56c49662db16d3343df34b13#56c5a0b18442f7e03c731719" target="_blank" rel="external">ES2015系列(二) 理解Object.assign</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Object.assign()方法用于从一个或多个源对象（sources）中拷贝所有可枚举的自有属性到目标对象（target），并返回目标对象。拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.<span class="function"><span class="title">assign</span><span class="params">(target, ...sources)</span></span></span><br></pre></td></tr></table></figure>
<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>
<blockquote>
<p>原文：Both String and Symbol properties are copied.</p>
</blockquote>
<p>String和Symbol类型都可被直接分配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果属性是只读的，那将会抛出异常，目标对象将会停止改变（而之前的改变会保留）。但是对于null或者undefind会直接忽略。</p>]]>
    
    </summary>
    
      <category term="javascript-Object" scheme="http://yoursite.com/tags/javascript-Object/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[语录]]></title>
    <link href="http://yoursite.com/2016/02/18/%E8%AF%AD%E5%BD%95/"/>
    <id>http://yoursite.com/2016/02/18/语录/</id>
    <published>2016-02-18T01:42:46.000Z</published>
    <updated>2016-02-18T01:55:19.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>把复杂拆分成简单，将简单组合成强大，再用强大去解决复杂。  ——Unix设计思想之一</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>把复杂拆分成简单，将简单组合成强大，再用强大去解决复杂。  ——Unix设计思想之一</p>
</blockquote>
]]>
    </summary>
    
      <category term="语录" scheme="http://yoursite.com/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决手机端border1px变粗的问题]]></title>
    <link href="http://yoursite.com/2016/02/09/%E8%A7%A3%E5%86%B3%E6%89%8B%E6%9C%BA%E7%AB%AFborder1px%E5%8F%98%E7%B2%97%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/02/09/解决手机端border1px变粗的问题/</id>
    <published>2016-02-09T09:02:38.000Z</published>
    <updated>2016-02-18T03:33:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="因由">因由</h3><p>简单地举例说吧，例如iphone 5s，2倍高清屏，实际的屏幕像素是1136×640px，物理像素只有其1/2，然而css上使用的border:1px却是物理尺寸，所以，在手机上看到的线就会变成了2个px（如果有对比的话，会非常明显）。同理在3倍高清屏上，也是一样，会变成3px。解决的方法都是差不多，使用其他元素来替代border，然后根据不同的屏幕来缩放大小，2倍就50%，3倍就33.333%。</p>
<h3 id="1、使用scale">1、使用scale</h3><p>举个例子，现在要做一个上边框 <em>border-top</em> ，这里是用了伪类元素:before来模拟这条上边框，样式如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ～border-top</span></span><br><span class="line"><span class="tag">div</span><span class="class">.ui-border-top</span><span class="pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: auto;</span><br><span class="line">  <span class="attribute">right</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="hexcolor">#c8c7cc</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">-webkit-transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后就需要根据不同的屏来缩放大小，如下：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2倍高清屏</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (-webkit-min-device-pixel-ratio:<span class="preprocessor"> 2</span>)&#123;</span></span><br><span class="line">  <span class="tag">div</span><span class="class">.ui-border-top</span><span class="pseudo">:before</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span><span class="value">: <span class="function">scaleY</span>(<span class="number">0.5</span>);</span> <span class="comment">//因为这里只需要缩放y轴</span></span><br><span class="line">  	<span class="attribute">transform</span><span class="value">: <span class="function">scaleY</span>(<span class="number">0.5</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3倍高清屏</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (-webkit-min-device-pixel-ratio:<span class="preprocessor"> 3</span>)&#123;</span></span><br><span class="line">  <span class="tag">div</span><span class="class">.ui-border-top</span><span class="pseudo">:before</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span><span class="value">: <span class="function">scaleY</span>(<span class="number">0.33</span>);</span></span><br><span class="line">  	<span class="attribute">transform</span><span class="value">: <span class="function">scaleY</span>(<span class="number">0.33</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、使用gradient">2、使用gradient</h3><p>这种方法的局限性比较大，因为需要使用到元素的背景属性，大概的思路就是利用渐变，来达到线条变小了的效果（其实只是看起来小了）。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@media</span> screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>)&#123;</span><br><span class="line">  <span class="tag">div</span><span class="class">.ui-border-top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>; <span class="comment">//1px高度同样翻倍</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">    <span class="attribute">background-position</span>: left top;</span><br><span class="line">    <span class="attribute">background-image</span>:  <span class="function">-webkit-linear-gradient</span>(bottom, transparent, transparent, <span class="hexcolor">#ddd</span>); <span class="comment">//使用线性渐变，Linear Gradient (with Even Stops)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/hejx/pen/WrPBLm?editors=1100" target="_blank" rel="external">在线Demo</a></p>
<p>如果需要适配3倍高清屏，就需要把渐变再分细一层。</p>
<h3 id="3、制作圆角边框">3、制作圆角边框</h3><p>同样使用伪类元素:before来代替。因为有圆角，所以上面提到的方法就行不通了，那么这里使用的方法就是制作一个2倍大小的元素（对应2倍高清屏），然后缩小一倍，来达到1px边框的效果。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@media</span> screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>)&#123;</span><br><span class="line">  <span class="class">.ui-border-radius</span><span class="pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200%</span>; <span class="comment">//2倍大小</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="hexcolor">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="function">scale</span>(<span class="number">0.5</span>); <span class="comment">//缩小50%</span></span><br><span class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、总结">4、总结</h3><p>整个实现的方法都是通过使用别的元素来模拟边框，然后根据不同的屏幕来缩放，建议使用伪类元素来替代，这样就不会影响到html的元素布局。（ps：以上的方法并未进行兼容测试，不过可以默认webkit内核的都可以，部分渣渣安卓手机可能也不太兼容！）</p>
<p><a href="http://frozenui.github.io/base.html#border" target="_blank" rel="external">参考资料：frozenui</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="因由">因由</h3><p>简单地举例说吧，例如iphone 5s，2倍高清屏，实际的屏幕像素是1136×640px，物理像素只有其1/2，然而css上使用的border:1px却是物理尺寸，所以，在手机上看到的线就会变成了2个px（如果有对比的话，会非常明显）。同理在3倍高清屏上，也是一样，会变成3px。解决的方法都是差不多，使用其他元素来替代border，然后根据不同的屏幕来缩放大小，2倍就50%，3倍就33.333%。</p>
<h3 id="1、使用scale">1、使用scale</h3><p>举个例子，现在要做一个上边框 <em>border-top</em> ，这里是用了伪类元素:before来模拟这条上边框，样式如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ～border-top</span></span><br><span class="line"><span class="tag">div</span><span class="class">.ui-border-top</span><span class="pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: auto;</span><br><span class="line">  <span class="attribute">right</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="hexcolor">#c8c7cc</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">-webkit-transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="webapp" scheme="http://yoursite.com/tags/webapp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jane-test]]></title>
    <link href="http://yoursite.com/2016/02/07/jane-test/"/>
    <id>http://yoursite.com/2016/02/07/jane-test/</id>
    <published>2016-02-07T10:46:28.000Z</published>
    <updated>2016-02-26T06:35:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="代码">代码</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">test</span> = '<span class="keyword">test</span>';</span><br><span class="line">console.<span class="literal">log</span>(<span class="keyword">test</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//message</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = 0, len = 10; i &lt; len; i+=) &#123;</span><br><span class="line">	console.<span class="literal">log</span>(i + 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Blockquotes">Blockquotes</h3><blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<h3 id="link">link</h3><p><a href="https://github.com/Alex-fun/hexo-theme-jane" target="_blank" rel="external">项目地址</a></p>
<h3 id="image">image</h3><p><img src="https://hexo.io/build/screenshots/jane-c5c7c338b3@2x.png" alt="image"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="代码">代码</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</s]]>
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo-theme-jane]]></title>
    <link href="http://yoursite.com/2016/02/07/hexo-theme-jane/"/>
    <id>http://yoursite.com/2016/02/07/hexo-theme-jane/</id>
    <published>2016-02-07T09:59:50.000Z</published>
    <updated>2016-02-07T10:15:41.000Z</updated>
    <content type="html"><![CDATA[<h3 id="关于">关于</h3><p>这是一个极其简单的hexo主题，甚至说，她是不及格的。这完全是按照我自己的需求和想法来设计的一个主题，没有太多的功能，例如，没有搜索功能，没有海贼王和火影忍者，没有分享，也没有脸书和推特。因为，我只希望这仅仅是一个给自己记录文字的地方，所以，没有太多花俏的功能！</p>
<p>如果您也喜欢这样，欢迎您使用的我的主题！</p>
<h3 id="安装">安装</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/</span><span class="constant">Alex</span>-<span class="function"><span class="keyword">fun</span><span class="title">/</span></span>hexo-theme-jane.git themes/jane</span><br></pre></td></tr></table></figure>
<p>然后配置根目录的_config.yml文件（并非theme里的那个）</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">theme</span>: <span class="string">jane</span></span><br></pre></td></tr></table></figure>
<h3 id="tags">tags</h3><p>因为tags是单独一个页面展示，所以需要手动添加，输入以下命令就可以了</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="keyword">tags</span></span><br></pre></td></tr></table></figure>
<h3 id="更新">更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/jane</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="关于">关于</h3><p>这是一个极其简单的hexo主题，甚至说，她是不及格的。这完全是按照我自己的需求和想法来设计的一个主题，没有太多的功能，例如，没有搜索功能，没有海贼王和火影忍者，没有分享，也没有脸书和推特。因为，我只希望这仅仅是一个给自己记录文字的地方，]]>
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新的开始]]></title>
    <link href="http://yoursite.com/2016/02/07/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2016/02/07/新的开始/</id>
    <published>2016-02-07T09:50:43.000Z</published>
    <updated>2016-02-07T09:52:10.000Z</updated>
    <content type="html"><![CDATA[<p>2016，重新起航！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2016，重新起航！</p>
]]>
    </summary>
    
      <category term="bullshit" scheme="http://yoursite.com/tags/bullshit/"/>
    
  </entry>
  
</feed>
