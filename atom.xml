<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hejx&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-24T16:04:44.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hejx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何编写高效的 CSS 选择器</title>
    <link href="http://yoursite.com/2017/04/24/%E9%AB%98%E6%95%88CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/04/24/高效CSS选择器/</id>
    <published>2017-04-24T05:37:29.000Z</published>
    <updated>2017-04-24T16:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>大部分人看到下面的这一小段 CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#menus</span> &gt; <span class="selector-tag">li</span> &#123; <span class="attribute">font-size</span>: <span class="number">14px</span>; &#125;</div></pre></td></tr></table></figure>
<p>可能都会猜想浏览器会使从左到右匹配上面的规则，我们会想象浏览器先找到唯一的 id 为 menus 的元素，然后把样式应用到其直系子元素 li 元素上。这看起来好像还挺高效的。</p>
<p>但是，事实上，<strong>CSS 选择符是从右到左进行匹配</strong>的。所以，上面的这条规则并不高效，浏览器必需遍历页面上的每个 li 元素并确定其父元素的 id  是否为 menus。</p>
<blockquote>
<p>样式系统从最右边的选择符开始向左匹配规则。只有当前选择符的左边还有其他的选择符，样式系统就会继续向左移动，直到找到和规则匹配的元素，或者因为不匹配而退出。  —- 《在 Mozilla UI 中编写高效的 CSS》 David Hyatt</p>
</blockquote>
<a id="more"></a>
<p>以下是 David Hyatt 在书中提出的编写高效选择符指南：</p>
<h5 id="一、避免使用通配规则"><a href="#一、避免使用通配规则" class="headerlink" title="一、避免使用通配规则"></a>一、避免使用通配规则</h5><p>除了传统意义上的通配选择符之外，我们把相邻兄弟选择符、子选择符、后代选择符合属性选择符都归纳到<strong>通配规则</strong>分类下，推荐仅使用 ID、类和标签选择符。</p>
<h5 id="二、不要限定-ID-选择符"><a href="#二、不要限定-ID-选择符" class="headerlink" title="二、不要限定 ID 选择符"></a>二、不要限定 ID 选择符</h5><p>在页面中一个指定的ID只能对应一个元素，所以没有必要添加额外的限定符。例如，<code>div#header</code>是没有必要的，应该简化为<code>#header</code>。</p>
<h5 id="三、不要限定类选择符"><a href="#三、不要限定类选择符" class="headerlink" title="三、不要限定类选择符"></a>三、不要限定类选择符</h5><p>不要用具体的标签限定类选择符，而是根据实际情况对类名进行扩展。例如，把<code>li.chapter</code>改成<code>.li-chapter</code>，或是<code>.list-chapter</code>更好。</p>
<h5 id="四、让规则越具体越好"><a href="#四、让规则越具体越好" class="headerlink" title="四、让规则越具体越好"></a>四、让规则越具体越好</h5><p>不要试图编写像 ol li a 这样的长选择符，最好是创建一个像<code>.list-anchor</code>一样的类，并把它添加到适当的元素上。</p>
<h5 id="五、避免使用后代选择符"><a href="#五、避免使用后代选择符" class="headerlink" title="五、避免使用后代选择符"></a>五、避免使用后代选择符</h5><p>通常处理后代选择符的开销时最高的，而使用子选择符也可以得到想要的结果，并且更加高效。</p>
<h5 id="六、避免使用标签—子选择符"><a href="#六、避免使用标签—子选择符" class="headerlink" title="六、避免使用标签—子选择符"></a>六、避免使用标签—子选择符</h5><p>如果有像<code>#menus &gt; li &gt; a</code>这样的基于标签的子选择符，那么应该使用一个类来关联每个标签元素，例如<code>.menus-item</code>。</p>
<h5 id="七、质疑子选择符的所有用途"><a href="#七、质疑子选择符的所有用途" class="headerlink" title="七、质疑子选择符的所有用途"></a>七、质疑子选择符的所有用途</h5><p>检查所有使用子选择符的地方，然后尽可能用具体的类取代它们。</p>
<h5 id="八、依靠继承"><a href="#八、依靠继承" class="headerlink" title="八、依靠继承"></a>八、依靠继承</h5><p>了解哪些属性可以通过继承而来，然后避免对这些属性重复指定规则。例如，对列表元素而不是每个列表元素指定<code>list-style-image</code>。请参考<a href="http://www.w3.org/TR/CSS21/propidx.html" target="_blank" rel="external">继承属性的列表</a>来了解每个元素的可继承的属性。</p>
<blockquote>
<p>摘自《高性能网站建设进阶指南——Web开发者性能优化最佳实践》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大部分人看到下面的这一小段 CSS 代码：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#menus&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可能都会猜想浏览器会使从左到右匹配上面的规则，我们会想象浏览器先找到唯一的 id 为 menus 的元素，然后把样式应用到其直系子元素 li 元素上。这看起来好像还挺高效的。&lt;/p&gt;
&lt;p&gt;但是，事实上，&lt;strong&gt;CSS 选择符是从右到左进行匹配&lt;/strong&gt;的。所以，上面的这条规则并不高效，浏览器必需遍历页面上的每个 li 元素并确定其父元素的 id  是否为 menus。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;样式系统从最右边的选择符开始向左匹配规则。只有当前选择符的左边还有其他的选择符，样式系统就会继续向左移动，直到找到和规则匹配的元素，或者因为不匹配而退出。  —- 《在 Mozilla UI 中编写高效的 CSS》 David Hyatt&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Github上前端项目常见的dot文件</title>
    <link href="http://yoursite.com/2016/11/14/Github%E4%B8%8A%E9%A1%B9%E7%9B%AE%E5%B8%B8%E8%A7%81%E7%9A%84dot%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/11/14/Github上项目常见的dot文件/</id>
    <published>2016-11-14T03:15:25.000Z</published>
    <updated>2016-12-14T16:03:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>这个文件的作用就是告诉Git哪些文件不需要添加到版本管理中。</p>
<p>在实际项目中，往往会有很多文件不需要进行版本管理，例如这几个常见的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">node_modules/</div><div class="line">dist/</div></pre></td></tr></table></figure>
<h3 id="gitattributes"><a href="#gitattributes" class="headerlink" title=".gitattributes"></a>.gitattributes</h3><p>这个文件的作用是可以对项目中的个别文件或目录定义不同的合并策略，让Git知道怎样比较非文本文件，在你提交或签出前让 Git 过滤内容。</p>
<p>但是在Github上却有别的用处。在Github的仓库上，咱们都可以看到项目的描述下方会有一条颜色的粗线，不同的颜色代表不同的语言，例如黄色代表javascript。然后在搜索的时候，所显示的项目类型是由占比例最多的文件来决定，这样偶尔会出现JS的项目类型却是HTML，就只因为HTML的文件比JS的多。</p>
<a id="more"></a>
<p>那么，这种情况就可以使用.gitattributes主动告诉Github，咱们项目是啥类型：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test<span class="comment">/**/</span>*.js linguist-language=Vue</div></pre></td></tr></table></figure>
<p>Git相关的可以看这里<a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git%E5%B1%9E%E6%80%A7" target="_blank" rel="external">git-scm</a>。</p>
<h3 id="gitkeep"><a href="#gitkeep" class="headerlink" title=".gitkeep"></a>.gitkeep</h3><p>Git会忽略空的文件夹，但是某些时候我们希望把空的文件夹也添加到版本控制中，也许可以在文件夹里随意放点东西，一旦不为空，那就会被纳入版本控制范围内。但是在空的文件夹里特意放点东西，感觉会很唐突和奇怪。</p>
<p>然后，就有了这个看似合理的文件: .gitkeep，但其并不是Git的规范。</p>
<h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><p>Babel可以说是当今前端领域里非常重要的一个工具，那么以rc(run control)结尾的文件，通常都代表为配置文件。</p>
<p>那.babelrc文件毫无疑问就是对Babel进行配置的咯。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>],</div><div class="line">  <span class="string">"comments"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="eslintrc"><a href="#eslintrc" class="headerlink" title=".eslintrc"></a>.eslintrc</h3><p>.eslintrc文件是属于ESLint的配置文件，支持JSON和YAML两种语法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"env"</span>: &#123;</div><div class="line">    <span class="string">"mocha"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"globals"</span>: &#123;</div><div class="line">    <span class="string">"expect"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"sinon"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h3><p>看到ignore这个单词，基本都能猜出这文件时干嘛的，和.gitignore文件一样，都是用来说明需要忽略的文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">**<span class="comment">/*.min.js</span></div><div class="line">**/vendor<span class="comment">/*</span></div><div class="line">**/dist<span class="comment">/*</span></div></pre></td></tr></table></figure>
<h3 id="github"><a href="#github" class="headerlink" title=".github"></a>.github</h3><p>在一些比较有名的项目中，基本都能看到这个文件夹。一般这些项目贡献者都比较多，为了更好的管理项目，可以在这文件里进行一下配置，包括issue，pull-request和contribute的指引。<a href="https://github.com/ElemeFE/element/tree/dev/.github" target="_blank" rel="external">.github</a></p>
<p>例如 <em>ISSUE_TEMPLATE.md</em>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">### OS/Browers version</div><div class="line">&lt;!-- macOS/Chrome 53 --&gt;</div><div class="line"></div><div class="line">### Vue version</div><div class="line">&lt;!-- 2.0.0-rc.4 --&gt;</div><div class="line"></div><div class="line">### Reproduction Link</div><div class="line">&lt;!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. --&gt;</div><div class="line">&lt;!-- https://codepen.io/anon/pen/ozYpNA --&gt;</div><div class="line">&lt;!-- https://jsfiddle.net/gmve9d3p/ --&gt;</div><div class="line"></div><div class="line">### Steps to reproduce</div><div class="line"></div><div class="line">### What is Expected?</div><div class="line"></div><div class="line">### What is actually happening?</div></pre></td></tr></table></figure>
<p>那么当给该项目提issue时，所打开的文本编辑框中，就会出现以上的模版。</p>
<p><img src="https://cloud.githubusercontent.com/assets/6087438/21188326/fcafa1e8-c255-11e6-8570-a33e272fe3bf.png" alt="image"></p>
<h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><p>不同的人在开发时可能会选择不同的编辑器，哪怕在同一个团队，有人喜欢Sublime，有人喜欢VScode。喜欢哪个编辑器并无问题，关键是代码的规范能否统一，例如最常说的缩进，到底是2个空格还是直接tab一下。</p>
<p>那么.editorconfig文件的作用就是来统一项目编码规范（需要安装编辑器对应的EditorConfig插件）。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># editorconfig.org</div><div class="line"></div><div class="line">root = true</div><div class="line"></div><div class="line">[*]</div><div class="line">charset = utf-8</div><div class="line">end_of_line = lf</div><div class="line">indent_size = 2</div><div class="line">indent_style = space</div><div class="line">insert_final_newline = true</div><div class="line">trim_trailing_whitespace = true</div></pre></td></tr></table></figure>
<h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>.travis.yml也是在有名的Github项目中很常见的一种文件，它是属于Travis Ci的配置说明文件。Travis Ci是一个基于云的持续集成项目，目前已经支持大部分主流语言了，Travis Ci与Github集成非常紧密，官方的集成测试托管只支持Github项目，不过你也可以通过Travis Ci开源项目搭建一套属于自己的方案。</p>
<p>简单地来说，.travis.yml文件的作用就是告诉Travis Ci应该用何种环境或配置条件来测试项目。</p>
<p>例如Node.js的项目：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">language: node_js</div><div class="line">node_js: <span class="number">5</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;gitignore&quot;&gt;&lt;a href=&quot;#gitignore&quot; class=&quot;headerlink&quot; title=&quot;.gitignore&quot;&gt;&lt;/a&gt;.gitignore&lt;/h3&gt;&lt;p&gt;这个文件的作用就是告诉Git哪些文件不需要添加到版本管理中。&lt;/p&gt;
&lt;p&gt;在实际项目中，往往会有很多文件不需要进行版本管理，例如这几个常见的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.DS_Store&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;node_modules/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dist/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;gitattributes&quot;&gt;&lt;a href=&quot;#gitattributes&quot; class=&quot;headerlink&quot; title=&quot;.gitattributes&quot;&gt;&lt;/a&gt;.gitattributes&lt;/h3&gt;&lt;p&gt;这个文件的作用是可以对项目中的个别文件或目录定义不同的合并策略，让Git知道怎样比较非文本文件，在你提交或签出前让 Git 过滤内容。&lt;/p&gt;
&lt;p&gt;但是在Github上却有别的用处。在Github的仓库上，咱们都可以看到项目的描述下方会有一条颜色的粗线，不同的颜色代表不同的语言，例如黄色代表javascript。然后在搜索的时候，所显示的项目类型是由占比例最多的文件来决定，这样偶尔会出现JS的项目类型却是HTML，就只因为HTML的文件比JS的多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>迁移到webpack2</title>
    <link href="http://yoursite.com/2016/10/21/%E8%BF%81%E7%A7%BB%E5%88%B0webpack2/"/>
    <id>http://yoursite.com/2016/10/21/迁移到webpack2/</id>
    <published>2016-10-21T14:55:05.000Z</published>
    <updated>2016-11-05T03:53:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近前端聊得最多的莫过于<strong>某某某2.0发布了</strong>，作为前端狗即感兴奋又觉苦逼。然而，webpack也不例外，一个东西的新版发布，文档什么的都得跟上，然而现在好像资料并不多，官方的说法是，webpack1和2在使用上并没有太大的区别。 好吧，那就折腾折腾webpack2吧.</p>
<blockquote>
<p><a href="http://javascriptplayground.com/blog/2016/10/moving-to-webpack-2/" target="_blank" rel="external">原文地址 http://javascriptplayground.com/blog/2016/10/moving-to-webpack-2/</a></p>
</blockquote>
<h3 id="Install-Webpack-2"><a href="#Install-Webpack-2" class="headerlink" title="Install Webpack 2"></a>Install Webpack 2</h3><p>第一步，当然是安装最新版本的webpack2，不过因为还没正式发布，所以咱们就指定一个版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev webpack@2.1.0-beta.25</div></pre></td></tr></table></figure>
<p>如果你还用到其他的webpack插件（这假设简直是多余），那很可能就需要升级到2.0。</p>
<p>例如<code>extract-text-webpack-plugin</code>，同样也在2.0的路上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev extract-text-webpack-plugin@2.0.0-beta.4</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="module-loaders-gt-module-rules"><a href="#module-loaders-gt-module-rules" class="headerlink" title="module.loaders =&gt; module.rules"></a>module.loaders =&gt; module.rules</h3><p><strong>module.loaders</strong> 还是可以继续使用，但是将来可能会被删掉，所以在2.0的配置里最好使用 <strong>module.rules</strong> 替代。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// before</span></div><div class="line">modules: &#123;</div><div class="line">  loaders: &#123;...&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// after</span></div><div class="line">modules: &#123;</div><div class="line">  rules: &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="resolve-modulesDirectories-gt-resolve-modules"><a href="#resolve-modulesDirectories-gt-resolve-modules" class="headerlink" title="resolve.modulesDirectories =&gt; resolve.modules"></a>resolve.modulesDirectories =&gt; resolve.modules</h3><p><strong>resolve</strong> 的配置也有所改变。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// before</span></div><div class="line">resolve: &#123;</div><div class="line">  modulesDirectories: [...],</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// after</span></div><div class="line">resolve: &#123;</div><div class="line">  modules: [...],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="No-webpack-optimize-OccurenceOrderPlugin"><a href="#No-webpack-optimize-OccurenceOrderPlugin" class="headerlink" title="No webpack.optimize.OccurenceOrderPlugin"></a>No webpack.optimize.OccurenceOrderPlugin</h3><p><strong>webpack.optimize.OccurenceOrderPlugin</strong> 这个插件，如果有研究过webpack优化的小伙伴应该就很清楚其作用，那么在2.0里，为默认功能，无需再手动添加到配置里。</p>
<h3 id="Configuring-loaders"><a href="#Configuring-loaders" class="headerlink" title="Configuring loaders"></a>Configuring loaders</h3><p>在项目中，一般会用到<strong>postcss</strong>和<strong>postcss-loader</strong>来加载和处理我们的CSS。在1.0里，需要在webpack配置的最外层对其进行单独配置，那么在2.0里是不再允许。作为替代，在2.0里允许对每个loader进行单独的配置，但是需要在对应的rule.use里。也就是说，在1.0里需要在最外层进行配置的插件，在2.0里就必须修改成在rule里单独配置。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// before, in Webpack top level</span></div><div class="line">postcss: &#123;</div><div class="line">  plugins: ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// after</span></div><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  rules: [&#123;</div><div class="line">    test: <span class="regexp">/\.scss$/</span>,</div><div class="line">    use: [</div><div class="line">      &#123;</div><div class="line">        loader: <span class="string">'postcss-loader'</span>,</div><div class="line">        options: &#123;</div><div class="line">          plugins: ...</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="string">'sass-loader'</span></div><div class="line">    ]</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ExtractTextPlugin-changes"><a href="#ExtractTextPlugin-changes" class="headerlink" title="ExtractTextPlugin changes"></a>ExtractTextPlugin changes</h3><p>上面提到的loaders配置的变更，无疑让我们配置webpack时更加方便和清晰。以前，往往需要传入多个loader作为参数来配置某些插件，例如 <em>ExtractTextPlugin</em>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Webpack 1</span></div><div class="line">ExtractTextPlugin.extract(</div><div class="line">  <span class="string">'style-loader'</span>,</div><div class="line">  <span class="string">'css-loader!postcss-loader!sass-loader'</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>如果有更多的配置时，显得更加麻烦和混乱。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Webpack 1</span></div><div class="line">ExtractTextPlugin.extract(</div><div class="line">  <span class="string">'style-loader'</span>,</div><div class="line">  <span class="string">'css-loader?modules-true!postcss-loader!sass-loader'</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>在2.0里可以通过定义个loaders的数组来替代上面的复杂配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Webpack 2</span></div><div class="line"><span class="keyword">var</span> loaders = [</div><div class="line">  &#123;</div><div class="line">    loader: <span class="string">'css-loader'</span>,</div><div class="line">    options: &#123;</div><div class="line">      modules: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    loader: <span class="string">'postcss-loader'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    loader: <span class="string">'sass-loader'</span></div><div class="line">  &#125;</div><div class="line">]</div><div class="line"></div><div class="line">ExtractTextPlugin.extract(&#123;</div><div class="line">  fallbackLoader: <span class="string">'style-loader'</span>,</div><div class="line">  loader: loaders,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Stop-Babel-from-compiling-ES2015-modules"><a href="#Stop-Babel-from-compiling-ES2015-modules" class="headerlink" title="Stop Babel from compiling ES2015 modules"></a>Stop Babel from compiling ES2015 modules</h3><p>在1.0里，webpack不支持ES2015的modules导入方法，但是可以通过Babel将其转成CommonJS的注入规范。在2.0里，同样支持ES6的原生module导入方法，并且他能够识别到在引入的模块中，有哪些代码是没有被使用的。也就是说，假如我们使用了Babel，应该要主动告诉他不要去把ES6的注入模块方法转成CommonJS。</p>
<p>我们可以通过改变 <strong>.babelrc</strong> 的配置来做到这点：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// before</span></div><div class="line"><span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</div><div class="line"></div><div class="line"><span class="comment">// after</span></div><div class="line"><span class="string">"presets"</span>: [</div><div class="line">  [<span class="string">"es2015"</span>, &#123; <span class="string">"modules"</span>: <span class="literal">false</span> &#125;]</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>Webpack2在性能上有不少的提升，在改善了资源打包的同时也优化了配置的方法，虽然现在还没正式发布，但如果可以，希望在你的项目上能用上她。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近前端聊得最多的莫过于&lt;strong&gt;某某某2.0发布了&lt;/strong&gt;，作为前端狗即感兴奋又觉苦逼。然而，webpack也不例外，一个东西的新版发布，文档什么的都得跟上，然而现在好像资料并不多，官方的说法是，webpack1和2在使用上并没有太大的区别。 好吧，那就折腾折腾webpack2吧.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://javascriptplayground.com/blog/2016/10/moving-to-webpack-2/&quot;&gt;原文地址 http://javascriptplayground.com/blog/2016/10/moving-to-webpack-2/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Install-Webpack-2&quot;&gt;&lt;a href=&quot;#Install-Webpack-2&quot; class=&quot;headerlink&quot; title=&quot;Install Webpack 2&quot;&gt;&lt;/a&gt;Install Webpack 2&lt;/h3&gt;&lt;p&gt;第一步，当然是安装最新版本的webpack2，不过因为还没正式发布，所以咱们就指定一个版本。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save-dev webpack@2.1.0-beta.25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你还用到其他的webpack插件（这假设简直是多余），那很可能就需要升级到2.0。&lt;/p&gt;
&lt;p&gt;例如&lt;code&gt;extract-text-webpack-plugin&lt;/code&gt;，同样也在2.0的路上&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save-dev extract-text-webpack-plugin@2.0.0-beta.4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Python之禅 by Tim Peters</title>
    <link href="http://yoursite.com/2016/09/10/Python%E4%B9%8B%E7%A6%85/"/>
    <id>http://yoursite.com/2016/09/10/Python之禅/</id>
    <published>2016-09-10T04:57:11.000Z</published>
    <updated>2016-11-04T15:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>优美胜于丑陋</p>
<p>明了胜于隐晦</p>
<p>简洁胜于复杂</p>
<p>复杂胜于混乱</p>
<p>扁平胜于嵌套</p>
<p>宽松胜于紧凑</p>
<a id="more"></a>
<p>可读性很重要</p>
<p>即便是特例，也不可违背这些规则</p>
<p>虽然现实往往不那么完美</p>
<p>但是不应该放过任何异常</p>
<p>除非你确定需要如此</p>
<p>如果存在多种可能，不要猜测</p>
<p>肯定有一种－通常也是唯一一种－最佳的解决方案</p>
<p>虽然这并不容易，因为你不是Python之父</p>
<p>动手比不动手要好</p>
<p>但不假思索就动手还不如不做</p>
<p>如果你的方案很难懂，那肯定不是一个好方案</p>
<p>如果你的方案很好懂，那肯定是一个好方案</p>
<p>命名空间非常有用，我们应当多加利用</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优美胜于丑陋&lt;/p&gt;
&lt;p&gt;明了胜于隐晦&lt;/p&gt;
&lt;p&gt;简洁胜于复杂&lt;/p&gt;
&lt;p&gt;复杂胜于混乱&lt;/p&gt;
&lt;p&gt;扁平胜于嵌套&lt;/p&gt;
&lt;p&gt;宽松胜于紧凑&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>javascript面向对象精要［摘］</title>
    <link href="http://yoursite.com/2016/08/27/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B2%BE%E8%A6%81/"/>
    <id>http://yoursite.com/2016/08/27/javascript面向对象精要/</id>
    <published>2016-08-27T13:19:42.000Z</published>
    <updated>2016-08-27T15:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-数据类型"><a href="#0-数据类型" class="headerlink" title="0.数据类型"></a>0.数据类型</h3><p>javaScript 有两种数据类型： 原始类型和引用类型。原始类型保存为简单类型。引用类型则保存为对象，其本质是指向内存位置的引用。</p>
<p>javaScript共有5种原始类型：boolean、number、string、null、undefined.</p>
<blockquote>
<p>typeof null 的值为 ‘obejct’， 逻辑上可以认为null是一个空的对象指针（设计错误），判断是否为空类型的最佳方法是直接和null比较，使用 ‘===’。</p>
</blockquote>
<p>javaScript提供3种原始封装类型：String、Number、Boolean。javaScript会在背后创建这些对象，使得能够像普通对象那样使用原始值，但这些临时对象在使用它们的语句结束时就会被立即销毁。<br><a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'test'</span>;</div><div class="line"><span class="keyword">var</span> b = a.charAt(<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 't'</span></div><div class="line"></div><div class="line"><span class="comment">//在背后发生的事情</span></div><div class="line"><span class="keyword">var</span> a = <span class="string">'test'</span>;</div><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(a);</div><div class="line"><span class="keyword">var</span> b = temp.charAt(<span class="number">0</span>);</div><div class="line">temp = <span class="literal">null</span>;</div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 't'</span></div></pre></td></tr></table></figure>
<h3 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数"></a>1.函数</h3><p>在javascript中，函数也是对象，区别于其他对象的特征就是在函数内存在一个被称为[[Call]]的内部属性，任何具有该熟悉的对象，在使用typeof时，都会返回’function’。</p>
<p>函数声明相比函数表达式，不同的是函数声明会被提升至上下文顶部。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = sum(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数的参数会被保存在一个称为arguments的类型数组的对象中，该对象并不是数组的实例，其拥有的方法和数组的不一样，且Array.isArray(arguments)始终返回false。</p>
<h3 id="2-原型对象"><a href="#2-原型对象" class="headerlink" title="2.原型对象"></a>2.原型对象</h3><p>原型对象被保存在对象实例内部的[[Prototype]]属性中，这个属性是一个引用而不是一个副本。基于javascript查找属性的机制，任何对原型对象的修改都会立即出现在所有对象实例中。当查找属性时，若在自有属性中没找到则会查找原型属性。</p>
<p>内建对象也有可以被修改的原型对象，但不建议在生产环境中使用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改内置对象</span></div><div class="line"><span class="built_in">Object</span>.prototype.test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = &#123;t:<span class="number">1</span>&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</div><div class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// 可以使用hasOwnProperty判断来避免</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// t</span></div><div class="line"><span class="comment">// test</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0-数据类型&quot;&gt;&lt;a href=&quot;#0-数据类型&quot; class=&quot;headerlink&quot; title=&quot;0.数据类型&quot;&gt;&lt;/a&gt;0.数据类型&lt;/h3&gt;&lt;p&gt;javaScript 有两种数据类型： 原始类型和引用类型。原始类型保存为简单类型。引用类型则保存为对象，其本质是指向内存位置的引用。&lt;/p&gt;
&lt;p&gt;javaScript共有5种原始类型：boolean、number、string、null、undefined.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;typeof null 的值为 ‘obejct’， 逻辑上可以认为null是一个空的对象指针（设计错误），判断是否为空类型的最佳方法是直接和null比较，使用 ‘===’。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;javaScript提供3种原始封装类型：String、Number、Boolean。javaScript会在背后创建这些对象，使得能够像普通对象那样使用原始值，但这些临时对象在使用它们的语句结束时就会被立即销毁。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>关于移动hybrid开发中H5页面的字体应与系统保持一致的问题</title>
    <link href="http://yoursite.com/2016/06/29/%E5%85%B3%E4%BA%8E%E7%A7%BB%E5%8A%A8hybrid%E5%BC%80%E5%8F%91%E4%B8%ADH5%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%AD%97%E4%BD%93%E5%BA%94%E4%B8%8E%E7%B3%BB%E7%BB%9F%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/06/29/关于移动hybrid开发中H5页面的字体应与系统保持一致的问题/</id>
    <published>2016-06-29T14:02:24.000Z</published>
    <updated>2016-06-30T01:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0、问题来源"><a href="#0、问题来源" class="headerlink" title="0、问题来源"></a>0、问题来源</h4><p>在移动hybrid开发，也就是说，部分页面会使用html+css+javascript技术来制作，例如个人中心，收藏页面等。一般来说，移动端都会将字体设置为system系统默认类型。起初，愚钝的我认为，只要在css里不设置任何字体，将会默认使用系统默认字体。然而结果并未如我所想，页面出来后，中文、英文和数字几乎是3种不同的字体，而且没有一类是和移动端的字体相同。</p>
<h4 id="1、浏览器默认字体"><a href="#1、浏览器默认字体" class="headerlink" title="1、浏览器默认字体"></a>1、浏览器默认字体</h4><p>基于上述的问题，我google了一下iOS和Android的默认字体。找到了一篇大概如下：</p>
<h5 id="1-1、iOS系统（感觉很正确）"><a href="#1-1、iOS系统（感觉很正确）" class="headerlink" title="1.1、iOS系统（感觉很正确）"></a>1.1、iOS系统（感觉很正确）</h5><ul>
<li>默认中文字体是Heiti SC</li>
<li>默认英文字体是Helvetica</li>
<li>默认数字字体是HelveticaNeue</li>
<li>无微软雅黑字体</li>
</ul>
<h5 id="1-2、Android系统"><a href="#1-2、Android系统" class="headerlink" title="1.2、Android系统"></a>1.2、Android系统</h5><ul>
<li>默认中文字体是Droidsansfallback</li>
<li>默认英文和数字字体是Droid Sans</li>
<li>无微软雅黑字体</li>
</ul>
<a id="more"></a>
<p>然后，我将上面的字体对应系统地测试了一遍，结果，也没有一款字体是和原生页面中的字体相同。</p>
<p>那么在此时，我突然觉得有个问题maybe理解错了，就是webview的默认字体和app级别的默认字体是同一回事么？从上面的测试，我觉得应该是不同的（当然也有可能是我找到的字体其实也是错的）。但就算是相同，每个系统的字体也不一定都一样，特别是android，各种字体乱来，如果按照不同的系统来配置字体，简直会让人疯掉。</p>
<p>然后我再去google…</p>
<h4 id="2、css设置system默认字体-apple-system"><a href="#2、css设置system默认字体-apple-system" class="headerlink" title="2、css设置system默认字体: -apple-system"></a>2、css设置system默认字体: -apple-system</h4><p>最终，我找到了-apple-system，一个<a href="https://webkit.org/blog/3709/using-the-system-font-in-web-content/" target="_blank" rel="external">AppleWebkit</a>里独有的属性。</p>
<blockquote>
<p>On iOS 9 and OS X 10.11, doing this allows you to use Apple’s new system font, San Francisco(打脸). On platforms which do not support -apple-system, the browser will simply fall back to the next item in the font-family fallback list. </p>
</blockquote>
<p>简单地设置一下</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">font-family</span>: -apple-system;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完美！！字体完全一致。</p>
<p>虽然这个属性不兼容低版本的iOS系统，也不是规范（AppleWebkit的私有属性），但是真的很cool。更巧的是，crosswalk也是基于AppleWebkit，所以如果你的原生app集成了crosswalk，那恭喜你，这方法完全能用。更更巧的是，咱们的Android就集成了crosswalk(这其实很正常)，所以安卓的也算是解决了。</p>
<p>那低版本的iOS7，8怎样解决呢？</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">font-family</span>: -apple-system, <span class="string">"Helvetica"</span>; <span class="comment">//再次打脸</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完美！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0、问题来源&quot;&gt;&lt;a href=&quot;#0、问题来源&quot; class=&quot;headerlink&quot; title=&quot;0、问题来源&quot;&gt;&lt;/a&gt;0、问题来源&lt;/h4&gt;&lt;p&gt;在移动hybrid开发，也就是说，部分页面会使用html+css+javascript技术来制作，例如个人中心，收藏页面等。一般来说，移动端都会将字体设置为system系统默认类型。起初，愚钝的我认为，只要在css里不设置任何字体，将会默认使用系统默认字体。然而结果并未如我所想，页面出来后，中文、英文和数字几乎是3种不同的字体，而且没有一类是和移动端的字体相同。&lt;/p&gt;
&lt;h4 id=&quot;1、浏览器默认字体&quot;&gt;&lt;a href=&quot;#1、浏览器默认字体&quot; class=&quot;headerlink&quot; title=&quot;1、浏览器默认字体&quot;&gt;&lt;/a&gt;1、浏览器默认字体&lt;/h4&gt;&lt;p&gt;基于上述的问题，我google了一下iOS和Android的默认字体。找到了一篇大概如下：&lt;/p&gt;
&lt;h5 id=&quot;1-1、iOS系统（感觉很正确）&quot;&gt;&lt;a href=&quot;#1-1、iOS系统（感觉很正确）&quot; class=&quot;headerlink&quot; title=&quot;1.1、iOS系统（感觉很正确）&quot;&gt;&lt;/a&gt;1.1、iOS系统（感觉很正确）&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;默认中文字体是Heiti SC&lt;/li&gt;
&lt;li&gt;默认英文字体是Helvetica&lt;/li&gt;
&lt;li&gt;默认数字字体是HelveticaNeue&lt;/li&gt;
&lt;li&gt;无微软雅黑字体&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;1-2、Android系统&quot;&gt;&lt;a href=&quot;#1-2、Android系统&quot; class=&quot;headerlink&quot; title=&quot;1.2、Android系统&quot;&gt;&lt;/a&gt;1.2、Android系统&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;默认中文字体是Droidsansfallback&lt;/li&gt;
&lt;li&gt;默认英文和数字字体是Droid Sans&lt;/li&gt;
&lt;li&gt;无微软雅黑字体&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>开始使用Ionic2</title>
    <link href="http://yoursite.com/2016/04/06/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Ionic2-0/"/>
    <id>http://yoursite.com/2016/04/06/开始使用Ionic2-0/</id>
    <published>2016-04-06T02:46:53.000Z</published>
    <updated>2016-04-06T12:40:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0、介绍"><a href="#0、介绍" class="headerlink" title="0、介绍"></a>0、介绍</h4><p>紧随angular的步伐，ionic也推出了2.0版本(beta)，把ng1换成了ng2，ui上也增加了material design和window phone的风格，组件上并没有太多的变化。因为ng2，代码风格完全不一样了，熟悉es6的童鞋应该很容易就能上手，而也因为ng2，让整个项目更组建化、模块化了。路由配置也更加简单。</p>
<p><a href="https://dn-cnode.qbox.me/FpA5jex9jPVAHpTIUqVbMQdXEvmd" title="ionic 2" class="fancybox" rel="external" target="_blank"><img src="https://dn-cnode.qbox.me/FpA5jex9jPVAHpTIUqVbMQdXEvmd" width="180" alt="ionic 2"></a><span class="caption">Ionic 2</span><br><br><br>          </p>

<a id="more"></a>
<h4 id="1、技术栈"><a href="#1、技术栈" class="headerlink" title="1、技术栈"></a>1、技术栈</h4><ul>
<li>Angular 2.0</li>
<li>TypeScript</li>
<li>Webpack Gulp</li>
<li>ES6</li>
<li>Sass</li>
</ul>
<h4 id="2、目录结构"><a href="#2、目录结构" class="headerlink" title="2、目录结构"></a>2、目录结构</h4><p>这样的目录结构，更能体现模块化。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">|<span class="string">____app.html</span></div><div class="line">|<span class="string">____app.ts</span></div><div class="line">|____pages</div><div class="line">|<span class="string"> </span>|____page1</div><div class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">____page1.html</span></div><div class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">____page1.scss</span></div><div class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">____page1.ts</span></div><div class="line">|____services</div><div class="line">|<span class="string"> </span>|<span class="string">____service.ts</span></div><div class="line">|____theme</div></pre></td></tr></table></figure>
<h4 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h4><p>1、app配置：app/app.ts作为入口文件（查看webpack.config.js），需要使用@app()来指定初始页面，同时还有相关的配置选项。<a href="http://ionicframework.com/docs/v2/api/decorators/App/" target="_blank" rel="external">doc</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@App</span>(&#123;</div><div class="line">  <span class="attribute">templateUrl</span>: <span class="string">'./build/app.html'</span></div><div class="line">&#125;)</div><div class="line">class DemoApp &#123;</div><div class="line">  <span class="selector-tag">constructor</span> () &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、路由配置：非常简单明了，不像1.0版本的ui-router，若需要在路由跳转时传递参数，并不用在配置时标明。跳转路由时，引入<code>NavController</code>模块，把新的页面push进去并带上需要传递的参数。而被跳转的页面，可以引入<code>NavParams</code>模块获取传递的参数。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;RouteConfig, Location&#125; from <span class="string">'angular2/router'</span>; <span class="comment">// 引入路由模块</span></div><div class="line"></div><div class="line"><span class="comment">// 配置路由</span></div><div class="line">const ROUTES = [</div><div class="line">  &#123; <span class="string">path:</span> <span class="string">'/list'</span>, <span class="string">component:</span> ListPage, <span class="string">useAsDefault:</span> <span class="literal">true</span> &#125;,</div><div class="line">  &#123; <span class="string">path:</span> <span class="string">'/detail'</span>, <span class="string">component:</span> DetailPage &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="meta">@App</span>(&#123;</div><div class="line"><span class="symbol">  templateUrl:</span> <span class="string">'./build/app.html'</span></div><div class="line">&#125;)</div><div class="line"><span class="meta">@RouteConfig</span>(ROUTES) <span class="comment">//传入</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApp</span> &#123;</span></div><div class="line">  constructor () &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 跳转页面</span></div><div class="line">goDetail (item) &#123;</div><div class="line">   <span class="keyword">this</span>.nav.push(DetailPage, &#123;</div><div class="line"><span class="symbol">      id:</span> item.id</div><div class="line">   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4、-page"><a href="#4、-page" class="headerlink" title="4、@page"></a>4、@page</h4><p>每一个页面都当成是一个component，这@page是由ng2的@component演变过来的，<code>providers</code>属性是要注入的服务。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Page(&#123;</span></div><div class="line">  templateUrl: <span class="meta-string">'./build/pages/list/list.html'</span>,</div><div class="line">  providers: [TopicService]</div><div class="line">&#125;)</div><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">ListPage</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span> () &#123;</div><div class="line">		<span class="keyword">this</span>.topics = []; <span class="comment">//绑定到页面的数据</span></div><div class="line">	&#125;</div><div class="line">	<span class="comment">//这里可以写各种方法</span></div><div class="line">	getTopics () &#123;</div><div class="line">		<span class="keyword">this</span>.topics.push(&#123;title: <span class="string">'test'</span>&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>绑定数据的方法也有了一点改变，详情可以看ng2的官方文档。页面渲染时，数据必须存在，不然会报错，或者渲染成undefined，这点感觉跟ng1有点不一样，没去深入研究。</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">ion-item</span> *<span class="attr">ngFor</span>=<span class="string">"#t of topic"</span> (<span class="attr">click</span>)=<span class="string">"goDetail(t)"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ion-avatar</span> <span class="attr">item-left</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123;t.author.avatar_url&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">ion-avatar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="template-variable">&#123;&#123;t.author.loginname&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="template-variable">&#123;&#123;t.title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="template-variable">&#123;&#123;t.create_at&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="5、http"><a href="#5、http" class="headerlink" title="5、http"></a>5、http</h4><p>在网上搜了几种方法，唯独就这种写法可以，<code>rxjs/add/operator/map</code>这个必须引入，不然下面的map方法不会执行，但是也不报错，一个坑。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//service.ts</span></div><div class="line"><span class="keyword">import</span> &#123; Inject &#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Http &#125; from <span class="string">'angular2/http'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</div><div class="line"></div><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">TopicService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(<span class="meta">@Inject(Http)</span> http: Http) &#123; <span class="comment">// 注意此处的@Inject()</span></div><div class="line">        <span class="keyword">this</span>.http = http</div><div class="line">    &#125;   </div><div class="line"> </div><div class="line">    getTopics () &#123;</div><div class="line">        <span class="keyword">var</span> url = <span class="string">'http://api.url.com'</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.<span class="keyword">get</span>(url).map(res =&gt; res.json());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6、项目地址"><a href="#6、项目地址" class="headerlink" title="6、项目地址"></a>6、<a href="https://github.com/Alex-fun/ionic2-starter" target="_blank" rel="external">项目地址</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0、介绍&quot;&gt;&lt;a href=&quot;#0、介绍&quot; class=&quot;headerlink&quot; title=&quot;0、介绍&quot;&gt;&lt;/a&gt;0、介绍&lt;/h4&gt;&lt;p&gt;紧随angular的步伐，ionic也推出了2.0版本(beta)，把ng1换成了ng2，ui上也增加了material design和window phone的风格，组件上并没有太多的变化。因为ng2，代码风格完全不一样了，熟悉es6的童鞋应该很容易就能上手，而也因为ng2，让整个项目更组建化、模块化了。路由配置也更加简单。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dn-cnode.qbox.me/FpA5jex9jPVAHpTIUqVbMQdXEvmd&quot; title=&quot;ionic 2&quot; class=&quot;fancybox&quot; rel=&quot;article2&quot;&gt;&lt;img src=&quot;https://dn-cnode.qbox.me/FpA5jex9jPVAHpTIUqVbMQdXEvmd&quot; width=&quot;180&quot; alt=&quot;ionic 2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;caption&quot;&gt;Ionic 2&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;          &lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ajax与302</title>
    <link href="http://yoursite.com/2016/04/06/ajax%E4%B8%8E302/"/>
    <id>http://yoursite.com/2016/04/06/ajax与302/</id>
    <published>2016-04-06T02:10:59.000Z</published>
    <updated>2016-04-06T12:51:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>You can’t handle redirects with XHR callbacks because the browser takes care of them automatically. You will only get back what at the redirected location.</p>
</blockquote>
<p>在ajax进行请求时，如果服务器返回302（重定向），ajax并不会马上收的，因为浏览器自动去访问了重定向的哪个连接，然后再返回结果。也就说，如果需要重定向的连接或者说是接口，是合法可以调用的，那ajax会返回重定向的那个连接的调用结果，反则就返回404。</p>
<p>大概流程如下：</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">ajax</span> -&gt;</span> <span class="function"><span class="title">browser</span> -&gt;</span> <span class="function"><span class="title">server</span> -&gt;</span> <span class="number">302</span> -&gt; <span class="function"><span class="title">browser</span>(redirect) -&gt;</span> <span class="function"><span class="title">server</span> -&gt;</span> <span class="function"><span class="title">browser</span> -&gt;</span> ajax callback</div></pre></td></tr></table></figure>
<p>如是需要利用重定向来跳转到某些页面，就不能直接返还302了。</p>
<p>常见的情况，登录过期，需要跳转到登录页面，这种情况，建议在返回需要重定向的状态码，例如返回{status: 302}, 然后由前端进行页面跳转。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;You can’t handle redirects with XHR callbacks because the browser takes care of them automatically. You will only get back w
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>获取字符串里最长单词的3种方法</title>
    <link href="http://yoursite.com/2016/04/03/%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/04/03/获取字符串里最长单词的3种方法/</id>
    <published>2016-04-03T04:20:16.000Z</published>
    <updated>2016-04-03T05:19:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>返回字符串中最长的单词的长度(number类型)</p>
</blockquote>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">findLongestWord</span>(str) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">str.length</span>;</div><div class="line">&#125;</div><div class="line">findLongestWord(<span class="string">"The quick brown fox jumped over the lazy dog"</span>);</div></pre></td></tr></table></figure>
<p>这里会使用3种方法，首先是FOR loop方法，接着是sort方法，最后是reduce方法。</p>
<a id="more"></a>
<h4 id="一、FOR-loop"><a href="#一、FOR-loop" class="headerlink" title="一、FOR loop"></a>一、FOR loop</h4><p>用split方法把字符串拆开，然后逐个遍历，找出最长的单词，并返回长度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> strSplit = str.split(<span class="string">' '</span>);</div><div class="line">  <span class="keyword">var</span> longestWord = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strSplit.length; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(strSplit[i].length &gt; longestWord)&#123;</div><div class="line">	longestWord = strSplit[i].length;</div><div class="line">     &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> longestWord;</div><div class="line">&#125;</div><div class="line">findLongestWord(<span class="string">"The quick brown fox jumped over the lazy dog"</span>);</div></pre></td></tr></table></figure>
<h4 id="二、sort"><a href="#二、sort" class="headerlink" title="二、sort()"></a>二、sort()</h4><p>sort() 方法对数组的元素做原地的排序，并返回这个数组。 sort 可能不是稳定的。默认按照字符串的Unicode码位点（code point）排序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> longestWord = str.split(<span class="string">' '</span>).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> b.length - a.length; &#125;);</div><div class="line">  <span class="keyword">return</span> longestWord[<span class="number">0</span>].length;</div><div class="line">&#125;</div><div class="line">findLongestWord(<span class="string">"The quick brown fox jumped over the lazy dog"</span>);</div></pre></td></tr></table></figure>
<h4 id="三、reduce"><a href="#三、reduce" class="headerlink" title="三、reduce()"></a>三、reduce()</h4><p>reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">reduce()–MDN</a></p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span><span class="params">(str)</span> &#123;</span></div><div class="line">  var longestWord = str.split(<span class="string">' '</span>).reduce(<span class="function"><span class="keyword">function</span><span class="params">(longest, currentWord)</span> &#123;</span></div><div class="line">    <span class="keyword">return</span> currentWord.<span class="built_in">length</span> &gt; longest.<span class="built_in">length</span> ? currentWord : longest;</div><div class="line">  &#125;, <span class="string">""</span>);</div><div class="line">  <span class="keyword">return</span> longestWord.<span class="built_in">length</span>;</div><div class="line">&#125;</div><div class="line">findLongestWord(<span class="string">"The quick brown fox jumped over the lazy dog"</span>);</div><div class="line">view raw</div></pre></td></tr></table></figure>
<p><a href="https://medium.freecodecamp.com/three-ways-to-find-the-longest-word-in-a-string-in-javascript-a2fb04c9757c#.oy3xuke6g" target="_blank" rel="external">摘自freecodecamp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;返回字符串中最长的单词的长度(number类型)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findLongestWord&lt;/span&gt;(str) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;str.length&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;findLongestWord(&lt;span class=&quot;string&quot;&gt;&quot;The quick brown fox jumped over the lazy dog&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里会使用3种方法，首先是FOR loop方法，接着是sort方法，最后是reduce方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>用css3制作tab控件的4种方法</title>
    <link href="http://yoursite.com/2016/03/10/%E7%94%A8css3%E5%88%B6%E4%BD%9Ctab%E6%8E%A7%E4%BB%B6%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/03/10/用css3制作tab控件的4种方法/</id>
    <published>2016-03-10T00:57:06.000Z</published>
    <updated>2016-04-05T06:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用（:focus :hover :target :checked）4种方法来实现tab效果。</p>
<h4 id="checked"><a href="#checked" class="headerlink" title=":checked"></a>:checked</h4><script async src="http://jsfiddle.net/yan_alex/yd5uyjd8/2/embed/html,css,result/"></script>

<a id="more"></a>
<p><a href="http://csscience.com/css3-tabs/#tabC" target="_blank" rel="external">无耻地摘自</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用（:focus :hover :target :checked）4种方法来实现tab效果。&lt;/p&gt;
&lt;h4 id=&quot;checked&quot;&gt;&lt;a href=&quot;#checked&quot; class=&quot;headerlink&quot; title=&quot;:checked&quot;&gt;&lt;/a&gt;:checked&lt;/h4&gt;&lt;script async src=&quot;http://jsfiddle.net/yan_alex/yd5uyjd8/2/embed/html,css,result/&quot;&gt;&lt;/script&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>awesome button</title>
    <link href="http://yoursite.com/2016/03/02/awesome-button/"/>
    <id>http://yoursite.com/2016/03/02/awesome-button/</id>
    <published>2016-03-02T01:19:40.000Z</published>
    <updated>2016-03-10T01:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>收集每一个很帅的特效按钮！</p>
</blockquote>
<a id="more"></a>
<h3 id="1-展开效果"><a href="#1-展开效果" class="headerlink" title="1:展开效果"></a>1:展开效果</h3><iframe width="100%" height="300" src="//jsfiddle.net/yan_alex/x6adfrpz/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="2-红霞灯效果"><a href="#2-红霞灯效果" class="headerlink" title="2:红霞灯效果"></a>2:红霞灯效果</h3><iframe width="100%" height="300" src="//jsfiddle.net/yan_alex/zhpnmxwu/4/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;收集每一个很帅的特效按钮！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="button" scheme="http://yoursite.com/tags/button/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>理解Object.keys</title>
    <link href="http://yoursite.com/2016/02/27/%E7%90%86%E8%A7%A3Object-keys/"/>
    <id>http://yoursite.com/2016/02/27/理解Object-keys/</id>
    <published>2016-02-27T04:43:51.000Z</published>
    <updated>2016-02-27T15:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Object.keys()方法可以返回由传入对象的所有可枚举的自有属性的属性名组成的数组，这和使用<em>for…in</em>遍历对象不同，for-in会把对象的原型链上继承到的可枚举属性也会遍历出来。</p>
<p>属性名的顺序和for-in出来的一样。</p>
<blockquote>
<p>Object.keys(obj)</p>
</blockquote>
<a id="more"></a>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr));  <span class="comment">// 输出 ["0", "1", "2"]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'foo'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(str));  <span class="comment">// 输出 ["0", "1", "2"] 注： 在es5下，这会抛出一个TypeError的错误</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;<span class="string">'bar'</span>: <span class="number">2</span>&#125;, &#123;</div><div class="line">  baz: &#123;</div><div class="line">    value: <span class="string">'hello'</span>,</div><div class="line">    enumerable: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  foo: &#123;</div><div class="line">  	value: <span class="string">'10'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">obj.test = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// 输出 ["baz", "test"]</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;<span class="built_in">console</span>.log(i)&#125; <span class="comment">// 输出 baz, test, bar  注： 顺序是一样的，但是bar是继承回来的属性</span></div></pre></td></tr></table></figure>
<h3 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.keys) &#123;</div><div class="line">  <span class="built_in">Object</span>.keys = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;  </div><div class="line">    <span class="keyword">var</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty,</div><div class="line">        hasDontEnumBug = !(&#123;toString: <span class="literal">null</span>&#125;).propertyIsEnumerable(<span class="string">'toString'</span>);</div><div class="line">        dontEnums = [</div><div class="line">          <span class="string">'toString'</span>,</div><div class="line">          <span class="string">'toLocaleString'</span>,</div><div class="line">          <span class="string">'valueOf'</span>,</div><div class="line">          <span class="string">'hasOwnProperty'</span>,</div><div class="line">          <span class="string">'isPrototypeOf'</span>,</div><div class="line">          <span class="string">'propertyIsEnumerable'</span>,</div><div class="line">          <span class="string">'constructor'</span></div><div class="line">        ],</div><div class="line">        dontEnumsLength = dontEnums.length;</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'Object'</span> &amp;&amp; (<span class="keyword">typeof</span> obj !== <span class="string">'function'</span> || obj === <span class="literal">null</span>))&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Object.keys called on non-object'</span>);</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">var</span> result = [], prop, i;</div><div class="line">      <span class="keyword">for</span> (prop <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> (hasOwnProperty.call(obj, prop)) &#123;</div><div class="line">          result.push(prop);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> (hasDontEnumBug) &#123;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dontEnumsLength; i++) &#123;</div><div class="line">          <span class="keyword">if</span> (hasOwnProperty.call(obj, dontEnums[i])) &#123;</div><div class="line">            result.push(dontEnums[i]);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">    &#125;;</div><div class="line">  &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="external">摘自</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Object.keys()方法可以返回由传入对象的所有可枚举的自有属性的属性名组成的数组，这和使用&lt;em&gt;for…in&lt;/em&gt;遍历对象不同，for-in会把对象的原型链上继承到的可枚举属性也会遍历出来。&lt;/p&gt;
&lt;p&gt;属性名的顺序和for-in出来的一样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Object.keys(obj)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript-Object" scheme="http://yoursite.com/tags/javascript-Object/"/>
    
  </entry>
  
  <entry>
    <title>常用shell命令</title>
    <link href="http://yoursite.com/2016/02/26/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/02/26/常用命令/</id>
    <published>2016-02-25T16:25:34.000Z</published>
    <updated>2016-02-27T15:29:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、ls"><a href="#1、ls" class="headerlink" title="1、ls"></a>1、ls</h3><p>ls最常用的参数有三个： -a -l -F。</p>
<p>ls –a<br>Linux上的文件以.开头的文件被系统视为隐藏文件，仅用ls命令是看不到他们的，而用ls -a除了显示一般文件名外，连隐藏文件也会显示出来。</p>
<p>ls –l<br>该参数显示更详细的文件信息。</p>
<p>ls –F<br>使用这个参数表示在文件的后面多添加表示文件类型的符号，例如*表示可执行，/表示目录，@表示连结文件，这都是因为使用了-F这个参数。但是现在基本上所有的Linux发行版本的ls都已经内建了-F参数，也就是说，不用输入这个参数，我们也能看到各种分辨符号。<br><a id="more"></a></p>
<h3 id="2、cd"><a href="#2、cd" class="headerlink" title="2、cd"></a>2、cd</h3><p>cd aaa 进入aaa目录</p>
<p>cd    命令后不指定目录，会切换到当前用户的home 目录</p>
<p>cd ~  作用同cd后不指定目录，切换到当前用户的home 目录</p>
<p>cd -  命令后跟一个减号，则会退回到切换前的目录</p>
<p>cd .. 返回到当前目录下的上一级目录</p>
<h3 id="3、pwd"><a href="#3、pwd" class="headerlink" title="3、pwd"></a>3、pwd</h3><p>用于显示用户当前工作目录</p>
<h3 id="4、mkdir"><a href="#4、mkdir" class="headerlink" title="4、mkdir"></a>4、mkdir</h3><p>用于创建目录</p>
<p>-p参数，若指定路径的父目录不存在则一并创建</p>
<h3 id="5、cp复制命令"><a href="#5、cp复制命令" class="headerlink" title="5、cp复制命令"></a>5、cp复制命令</h3><p>复制一个文件到另一目录：cp 1.txt ../test2</p>
<p>复制一个文件到本目录并改名：cp 1.txt 2.txt</p>
<p>复制一个文件夹a并改名为b：cp -r a b</p>
<h3 id="6、mv移动命令"><a href="#6、mv移动命令" class="headerlink" title="6、mv移动命令"></a>6、mv移动命令</h3><p>将一个文件移动到另一个目录：mv 1.txt ../test1</p>
<p>将一个文件在本目录改名：mv 1.txt 2.txt</p>
<p>将一个文件一定到另一个目录并改名：mv 1.txt ../test1/2.txt</p>
<h3 id="7、rm删除命令"><a href="#7、rm删除命令" class="headerlink" title="7、rm删除命令"></a>7、rm删除命令</h3><p>rm命令常用的参数有三个：-i，-r，-f。</p>
<p>–i ：系统在删除文件之前会先询问确认，用户回车之后，文件才会真的被删除。需要注意，linux下删除的文件是不能恢复的，删除之前一定要谨慎确认。</p>
<p>–r：该参数支持目录删除，功能和rmdir命令相似。</p>
<p>–f：和-i参数相反，-f表示强制删除</p>
<p>-rf: 强制删除，慎用</p>
<h3 id="8、less查看文件"><a href="#8、less查看文件" class="headerlink" title="8、less查看文件"></a>8、less查看文件</h3><p>v 调用vi编辑器</p>
<p>q 退出less</p>
<h3 id="9、clear"><a href="#9、clear" class="headerlink" title="9、clear"></a>9、clear</h3><p>clear命令是用来清除当前屏幕显示的内容。</p>
<p><a href="http://blog.csdn.net/junmail/article/details/4602745" target="_blank" rel="external">无耻地摘自</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、ls&quot;&gt;&lt;a href=&quot;#1、ls&quot; class=&quot;headerlink&quot; title=&quot;1、ls&quot;&gt;&lt;/a&gt;1、ls&lt;/h3&gt;&lt;p&gt;ls最常用的参数有三个： -a -l -F。&lt;/p&gt;
&lt;p&gt;ls –a&lt;br/&gt;Linux上的文件以.开头的文件被系统视为隐藏文件，仅用ls命令是看不到他们的，而用ls -a除了显示一般文件名外，连隐藏文件也会显示出来。&lt;/p&gt;
&lt;p&gt;ls –l&lt;br/&gt;该参数显示更详细的文件信息。&lt;/p&gt;
&lt;p&gt;ls –F&lt;br/&gt;使用这个参数表示在文件的后面多添加表示文件类型的符号，例如*表示可执行，/表示目录，@表示连结文件，这都是因为使用了-F这个参数。但是现在基本上所有的Linux发行版本的ls都已经内建了-F参数，也就是说，不用输入这个参数，我们也能看到各种分辨符号。&lt;br&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>关于javascript里的声明提前（hoisting）</title>
    <link href="http://yoursite.com/2016/02/25/%E5%85%B3%E4%BA%8Ejavascript%E9%87%8C%E7%9A%84%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%92%8C%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/"/>
    <id>http://yoursite.com/2016/02/25/关于javascript里的变量提升和函数提升/</id>
    <published>2016-02-25T13:52:47.000Z</published>
    <updated>2016-02-25T15:38:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>“声明提前”是在javascript引擎的“预编译”时进行的，也就是在代码开始运行之前。</p>
</blockquote>
<p>在函数里声明的所有变量（但不涉及赋值），都会被“提前”至函数体的顶部。在函数体内，局部变量的优先级高于同名的全局变量，如果在函数体内声明一个局部变量或者函数参数中带有的变量和全局变量同名，那么全局变量将会被局部变量覆盖。而给一个没有被声明的变量赋值，在非严谨模式下，等同于在全局范围创建了一个同名属性。</p>
<p>在脚本里，所有的函数包括嵌套的函数，都会在当前的上下文中其他代码之前声明。函数定义语句中的函数会被显式地“提前”（包括函数名和函数体），在脚本和函数内部都是可见的，因此可以被提前调用。而使用var的话（函数定义表达式），只有变量会被提前，变量的定义还在原来的位置。</p>
<a id="more"></a>
<h3 id="反面教材1"><a href="#反面教材1" class="headerlink" title="反面教材1"></a>反面教材1</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>(<span class="name">a</span>)&#123;</div><div class="line">  console.log(<span class="name">a</span>)<span class="comment">; // 输出 function a()&#123;&#125;</span></div><div class="line">  var a = <span class="number">10</span><span class="comment">;</span></div><div class="line">  function a()&#123;&#125;<span class="comment">;</span></div><div class="line">&#125;)(<span class="number">100</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">(<span class="name">function</span>(<span class="name">a</span>)&#123;</div><div class="line">  console.log(<span class="name">a</span>)<span class="comment">; // 输出 100</span></div><div class="line">  var a = <span class="number">10</span><span class="comment">;</span></div><div class="line">&#125;)(<span class="number">100</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="反面教材2"><a href="#反面教材2" class="headerlink" title="反面教材2"></a>反面教材2</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 functiong a()&#123;&#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span><span class="title">g</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 输出 undefined</span></div><div class="line"><span class="keyword">var</span> a = funciton()&#123;&#125;;</div></pre></td></tr></table></figure>
<h3 id="反面教材3"><a href="#反面教材3" class="headerlink" title="反面教材3"></a>反面教材3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  a = <span class="number">10</span>;</div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 输出 10</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 输出 undefined</span></div><div class="line">  <span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 输出 20</span></div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 等于下面的</span></div><div class="line"><span class="keyword">var</span> a;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> a; </div><div class="line">  a = <span class="number">10</span>;</div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 输出 10</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 输出 undefined</span></div><div class="line">  a = <span class="number">20</span>;</div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 输出 20</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“声明提前”是在javascript引擎的“预编译”时进行的，也就是在代码开始运行之前。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在函数里声明的所有变量（但不涉及赋值），都会被“提前”至函数体的顶部。在函数体内，局部变量的优先级高于同名的全局变量，如果在函数体内声明一个局部变量或者函数参数中带有的变量和全局变量同名，那么全局变量将会被局部变量覆盖。而给一个没有被声明的变量赋值，在非严谨模式下，等同于在全局范围创建了一个同名属性。&lt;/p&gt;
&lt;p&gt;在脚本里，所有的函数包括嵌套的函数，都会在当前的上下文中其他代码之前声明。函数定义语句中的函数会被显式地“提前”（包括函数名和函数体），在脚本和函数内部都是可见的，因此可以被提前调用。而使用var的话（函数定义表达式），只有变量会被提前，变量的定义还在原来的位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>理解Object.create</title>
    <link href="http://yoursite.com/2016/02/20/%E7%90%86%E8%A7%A3Object-create/"/>
    <id>http://yoursite.com/2016/02/20/理解Object-create/</id>
    <published>2016-02-20T04:58:06.000Z</published>
    <updated>2016-02-24T14:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Object.create()方法是用来创建新的对象，并且可以指定原型（proto），和设定自身属性（propertiesObject）。如果指定的原型（proto）不是null或者一个对象值，将会抛出类型错误异常。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Object</span><span class="selector-class">.create</span>(<span class="selector-tag">proto</span><span class="selector-attr">[, propertiesObject]</span>)</div></pre></td></tr></table></figure>
<p>在js里，所有的端口都默认继承至Obejct，如果使用此方法创建一个对象，需要指定原型为Object.prototype，如果传入null的话，就不继承任何东西。<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这3种创建对象都是等价的</span></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Obejct();</div><div class="line"><span class="keyword">var</span> b = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> c = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</div><div class="line"></div><div class="line"><span class="comment">// d 不继承任何东西</span></div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<h3 id="实现类式继承"><a href="#实现类式继承" class="headerlink" title="实现类式继承"></a>实现类式继承</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 超类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.x += x;</div><div class="line">  <span class="keyword">this</span>.y += y;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Move'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 子类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">  Shape.call(<span class="keyword">this</span>, x, y); <span class="comment">//调用超类的构造函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</div><div class="line"></div><div class="line"><span class="built_in">var</span> <span class="built_in">rect</span> = <span class="keyword">new</span> Rectangle(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">rect</span> <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">rect</span> <span class="keyword">instanceof</span> Shape); <span class="comment">// ture</span></div><div class="line"><span class="built_in">rect</span>.move(<span class="number">10</span>, <span class="number">2</span>); <span class="comment">// Move</span></div></pre></td></tr></table></figure>
<h3 id="设置对象属性"><a href="#设置对象属性" class="headerlink" title="设置对象属性"></a>设置对象属性</h3><p>所有属性特性默认为false</p>
<ul>
<li>writable 可写</li>
<li>configurable 可配置</li>
<li>enumerable 可枚举</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</div><div class="line">  foo: &#123;</div><div class="line">    writable: <span class="literal">true</span>,</div><div class="line">    configurable: <span class="literal">true</span>,</div><div class="line">    value: <span class="number">10</span></div><div class="line">  &#125;,</div><div class="line">  baz: &#123;</div><div class="line">    configurable: <span class="literal">false</span>,</div><div class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">'hello'</span>&#125;,</div><div class="line">	set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'set value '</span> + val)&#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></div><div class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; p: &#123; value: <span class="number">42</span> &#125; &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></div><div class="line">o.p = <span class="number">24</span></div><div class="line">o.p</div><div class="line"><span class="comment">//42</span></div><div class="line"></div><div class="line">o.q = <span class="number">12</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</div><div class="line">  <span class="built_in">console</span>.log(prop)</div><div class="line">&#125;</div><div class="line"><span class="comment">//"q"</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> o.p</div><div class="line"><span class="comment">//false</span></div></pre></td></tr></table></figure>
<h3 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.create != <span class="string">'function'</span>) &#123;</div><div class="line">  <span class="comment">// Production steps of ECMA-262, Edition 5, 15.2.3.5</span></div><div class="line">  <span class="comment">// Reference: http://es5.github.io/#x15.2.3.5</span></div><div class="line">  <span class="built_in">Object</span>.create = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//为了节省内存，使用一个共享的构造器</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 使用 Object.prototype.hasOwnProperty 更安全的引用 </span></div><div class="line">    <span class="keyword">var</span> hasOwn = <span class="built_in">Object</span>.prototype.hasOwnProperty;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">O</span>) </span>&#123;</div><div class="line">      <span class="comment">// 1. 如果 O 不是 Object 或 null，抛出一个 TypeError 异常。</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> O != <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">'Object prototype may only be an Object or null'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 2. 使创建的一个新的对象为 obj ，就和通过</span></div><div class="line">      <span class="comment">//    new Object() 表达式创建一个新对象一样，</span></div><div class="line">      <span class="comment">//    Object是标准内置的构造器名</span></div><div class="line">      <span class="comment">// 3. 设置 obj 的内部属性 [[Prototype]] 为 O。</span></div><div class="line">      Temp.prototype = O;</div><div class="line">      <span class="keyword">var</span> obj = <span class="keyword">new</span> Temp();</div><div class="line">      Temp.prototype = <span class="literal">null</span>; <span class="comment">// 不要保持一个 O 的杂散引用（a stray reference）...</span></div><div class="line"></div><div class="line">      <span class="comment">// 4. 如果存在参数 Properties ，而不是 undefined ，</span></div><div class="line">      <span class="comment">//    那么就把参数的自身属性添加到 obj 上，就像调用</span></div><div class="line">      <span class="comment">//    携带obj ，Properties两个参数的标准内置函数</span></div><div class="line">      <span class="comment">//    Object.defineProperties() 一样。</span></div><div class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// Object.defineProperties does ToObject on its first argument.</span></div><div class="line">        <span class="keyword">var</span> Properties = <span class="built_in">Object</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> Properties) &#123;</div><div class="line">          <span class="keyword">if</span> (hasOwn.call(Properties, prop)) &#123;</div><div class="line">            obj[prop] = Properties[prop];</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 5. 返回 obj</span></div><div class="line">      <span class="keyword">return</span> obj;</div><div class="line">    &#125;;</div><div class="line">  &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul>
<li>es5 Initial definition. Implemented in JavaScript 1.8.5.</li>
<li>es6 </li>
</ul>
<h5 id="浏览器："><a href="#浏览器：" class="headerlink" title="浏览器："></a>浏览器：</h5><p>pc端： ie9+<br>移动端： 安卓和iOS都支持</p>
<h3 id="文献"><a href="#文献" class="headerlink" title="文献"></a>文献</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">developer.mozilla.org</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Object.create()方法是用来创建新的对象，并且可以指定原型（proto），和设定自身属性（propertiesObject）。如果指定的原型（proto）不是null或者一个对象值，将会抛出类型错误异常。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.create&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[, propertiesObject]&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在js里，所有的端口都默认继承至Obejct，如果使用此方法创建一个对象，需要指定原型为Object.prototype，如果传入null的话，就不继承任何东西。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript-Object" scheme="http://yoursite.com/tags/javascript-Object/"/>
    
  </entry>
  
  <entry>
    <title>理解Object.assign</title>
    <link href="http://yoursite.com/2016/02/18/%E7%90%86%E8%A7%A3Object-assign/"/>
    <id>http://yoursite.com/2016/02/18/理解Object-assign/</id>
    <published>2016-02-18T14:13:13.000Z</published>
    <updated>2016-02-19T04:18:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Object.assign()方法用于从一个或多个源对象（sources）中拷贝所有可枚举的自有属性到目标对象（target），并返回目标对象。拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Object</span><span class="selector-class">.assign</span>(<span class="selector-tag">target</span>, ..<span class="selector-class">.sources</span>)</div></pre></td></tr></table></figure>
<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>
<blockquote>
<p>原文：Both String and Symbol properties are copied.</p>
</blockquote>
<p>String和Symbol类型都可被直接分配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：如果属性是只读的，那将会抛出异常，目标对象将会停止改变（而之前的改变会保留）。但是对于null或者undefind会直接忽略。</p>
<a id="more"></a>
<h3 id="简单克隆对象"><a href="#简单克隆对象" class="headerlink" title="简单克隆对象"></a>简单克隆对象</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="comment">&#123;a: 1&#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="keyword">copy</span> = Object.assign(<span class="comment">&#123;&#125;</span>, obj);</div><div class="line"></div><div class="line">console.log(<span class="keyword">copy</span>); <span class="comment">//Object &#123;a: 1&#125;</span></div></pre></td></tr></table></figure>
<h3 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;x: <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> b = &#123;y: <span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> c = &#123;x: <span class="number">4</span>, z: <span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(a, b, c);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">//Object &#123;x: 4, y: 2, z: 3&#125;</span></div></pre></td></tr></table></figure>
<h3 id="拷贝Symbol属性"><a href="#拷贝Symbol属性" class="headerlink" title="拷贝Symbol属性"></a>拷贝Symbol属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;x: <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> b = &#123;[<span class="built_in">Symbol</span>(<span class="string">'y'</span>)]: <span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(a, b);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">//Object &#123;x: 1, Symbol(y): 2&#125;</span></div></pre></td></tr></table></figure>
<h3 id="继承的属性和不可枚举的属性不会被拷贝"><a href="#继承的属性和不可枚举的属性不会被拷贝" class="headerlink" title="继承的属性和不可枚举的属性不会被拷贝"></a>继承的属性和不可枚举的属性不会被拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;foo: <span class="number">1</span>&#125;, <span class="comment">//继承的对象, obj.__proto__ == &#123;foo: 1&#125;</span></div><div class="line">	&#123;</div><div class="line">		a: &#123; <span class="comment">//不可枚举的</span></div><div class="line">			value: <span class="number">2</span></div><div class="line">		&#125;,</div><div class="line">		b: &#123;</div><div class="line">			value: <span class="number">3</span>,</div><div class="line">			enumerable: <span class="literal">true</span> <span class="comment">//可枚举的</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">);</div><div class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(copy); <span class="comment">//Object &#123;b: 3&#125;</span></div></pre></td></tr></table></figure>
<h3 id="字符串会被转成object"><a href="#字符串会被转成object" class="headerlink" title="字符串会被转成object"></a>字符串会被转成object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hejx'</span>;</div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, str);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">//Object &#123;0: "h", 1: "e", 2: "j", 3: "x"&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="string">"123"</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> c = <span class="number">123</span>;</div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Symbol</span>(<span class="string">'sy'</span>);</div><div class="line"><span class="keyword">var</span> e = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b, c, d, <span class="literal">null</span>, <span class="literal">undefined</span>);</div><div class="line"><span class="comment">//null和undefined会被忽略，在这里只有a（字符串）可以被枚举并被转成对象，如果存在2个字符串，将会报错</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(e); <span class="comment">//Object &#123;0: "1", 1: "2", 2: "3"&#125;</span></div></pre></td></tr></table></figure>
<h3 id="只读属性不能被拷贝"><a href="#只读属性不能被拷贝" class="headerlink" title="只读属性不能被拷贝"></a>只读属性不能被拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">'foo'</span>, &#123;</div><div class="line">	value: <span class="number">1</span>,</div><div class="line"> 	writable: <span class="literal">false</span></div><div class="line">&#125;); <span class="comment">// target.foo是只读属性</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.assign(target, &#123; bar: <span class="number">2</span> &#125;, &#123; foo2: <span class="number">3</span>, foo: <span class="number">3</span>, foo3: <span class="number">3</span> &#125;, &#123; baz: <span class="number">4</span> &#125;);</div><div class="line"><span class="comment">// 这里会抛出异常，但是在错误之前，目标对象的部分属性已经被改变或者新增，而后续的将不会再进行拷贝</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(target.bar);  <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(target.foo2); <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(target.foo);  <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(target.foo3); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(target.baz);  <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h3 id="拷贝属性的赋值器（setter）和取值器（getter）"><a href="#拷贝属性的赋值器（setter）和取值器（getter）" class="headerlink" title="拷贝属性的赋值器（setter）和取值器（getter）"></a>拷贝属性的赋值器（setter）和取值器（getter）</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">	a: <span class="number">1</span>,</div><div class="line">	<span class="built_in">get</span> b()&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">	&#125;,</div><div class="line">	someMethod()&#123; <span class="comment">//同样会被拷贝，可以用于为对象添加方法</span></div><div class="line">		<span class="comment">//someMethod</span></div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var <span class="built_in">copy</span> = <span class="keyword">Object</span>.assign(&#123;&#125;, obj);</div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">copy</span>); <span class="comment">// Object &#123;a: 1, b: 2, someMethod: function()&#123;&#125;&#125;</span></div></pre></td></tr></table></figure>
<h3 id="es5版本的Object-assign"><a href="#es5版本的Object-assign" class="headerlink" title="es5版本的Object.assign"></a>es5版本的Object.assign</h3><p>不支持Symbol属性，因为es5压根没有Symbol</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.assign != <span class="string">'function'</span>) &#123; <span class="comment">//判断是否支持</span></div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">Object</span>.assign = <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</div><div class="line"><span class="meta">      'use strict'</span>;</div><div class="line">      <span class="keyword">if</span> (target === <span class="literal">undefined</span> || target === <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> output = <span class="built_in">Object</span>(target);</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">1</span>; index &lt; <span class="built_in">arguments</span>.length; index++) &#123;</div><div class="line">        <span class="keyword">var</span> source = <span class="built_in">arguments</span>[index];</div><div class="line">        <span class="keyword">if</span> (source !== <span class="literal">undefined</span> &amp;&amp; source !== <span class="literal">null</span>) &#123;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> nextKey <span class="keyword">in</span> source) &#123;</div><div class="line">            <span class="keyword">if</span> (source.hasOwnProperty(nextKey)) &#123; <span class="comment">//判断一个属性是定义在对象本身而不是继承自原型链</span></div><div class="line">              output[nextKey] = source[nextKey];</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> output; <span class="comment">//最终输出</span></div><div class="line">    &#125;;</div><div class="line">  &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="不支持深度拷贝"><a href="#不支持深度拷贝" class="headerlink" title="不支持深度拷贝"></a>不支持深度拷贝</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> target = &#123; <span class="selector-tag">a</span>: &#123; <span class="selector-tag">b</span>: <span class="string">'c'</span>, d: <span class="string">'e'</span> &#125; &#125;</div><div class="line"><span class="selector-tag">var</span> source = &#123; <span class="selector-tag">a</span>: &#123; <span class="selector-tag">b</span>: <span class="string">'hello'</span> &#125; &#125;</div><div class="line">Object.assign(target, source)</div><div class="line"><span class="comment">// &#123; a: &#123; b: 'hello' &#125; &#125;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/sindresorhus/deep-assign" target="_blank" rel="external">深度拷贝</a></p>
<h3 id="拷贝数组"><a href="#拷贝数组" class="headerlink" title="拷贝数组"></a>拷贝数组</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; //会被当成对象</div><div class="line"><span class="built_in">var</span> str = <span class="string">"4567"</span>;</div><div class="line"><span class="built_in">var</span> <span class="built_in">copy</span> = Object.assign(&#123;&#125;, arr, str);</div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">copy</span>); // Object &#123;<span class="number">0</span>: <span class="string">"4"</span>, <span class="number">1</span>: <span class="string">"5"</span>, <span class="number">2</span>: <span class="string">"6"</span>, <span class="number">3</span>: <span class="string">"7"</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>属于es6规范，然而兼容性并不好，pc端除了ie，其他都支持。移动端目前就Firefox Mobile 支持。</p>
<h3 id="文献"><a href="#文献" class="headerlink" title="文献"></a>文献</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">摘自developer.mozilla.org</a></p>
<p><a href="http://es6.ruanyifeng.com/#docs/object#Object-assign" target="_blank" rel="external">es6.ruanyifeng.com</a></p>
<p><a href="https://cnodejs.org/topic/56c49662db16d3343df34b13#56c5a0b18442f7e03c731719" target="_blank" rel="external">ES2015系列(二) 理解Object.assign</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Object.assign()方法用于从一个或多个源对象（sources）中拷贝所有可枚举的自有属性到目标对象（target），并返回目标对象。拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.assign&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;target&lt;/span&gt;, ..&lt;span class=&quot;selector-class&quot;&gt;.sources&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：Both String and Symbol properties are copied.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;String和Symbol类型都可被直接分配。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clone&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;origin&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; originProto = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getPrototypeOf(origin);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(originProto), origin);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：如果属性是只读的，那将会抛出异常，目标对象将会停止改变（而之前的改变会保留）。但是对于null或者undefind会直接忽略。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript-Object" scheme="http://yoursite.com/tags/javascript-Object/"/>
    
  </entry>
  
  <entry>
    <title>语录</title>
    <link href="http://yoursite.com/2016/02/18/%E8%AF%AD%E5%BD%95/"/>
    <id>http://yoursite.com/2016/02/18/语录/</id>
    <published>2016-02-18T01:42:46.000Z</published>
    <updated>2016-02-18T01:55:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>把复杂拆分成简单，将简单组合成强大，再用强大去解决复杂。  ——Unix设计思想之一</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;把复杂拆分成简单，将简单组合成强大，再用强大去解决复杂。  ——Unix设计思想之一&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="语录" scheme="http://yoursite.com/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>解决手机端border1px变粗的问题</title>
    <link href="http://yoursite.com/2016/02/09/%E8%A7%A3%E5%86%B3%E6%89%8B%E6%9C%BA%E7%AB%AFborder1px%E5%8F%98%E7%B2%97%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/02/09/解决手机端border1px变粗的问题/</id>
    <published>2016-02-09T09:02:38.000Z</published>
    <updated>2016-07-31T15:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为何会变粗"><a href="#为何会变粗" class="headerlink" title="为何会变粗"></a>为何会变粗</h3><p>如iphone 5s，2倍高清屏，css上使用的border:1px对应的是设备独立像素，而此时，这1px会被转成4个物理像素（放大2倍，如下图）。所以，在手机上看到的边框（横向）其实是占用了2个物理像素的高度（如果有对比的话，会非常明显感觉边框高了一倍）。同理在3倍高清屏上，也是一样。</p>
<p>解决的方法都是差不多，使用其他元素来替代border，然后根据不同的屏幕来缩放大小，2倍就50%，3倍就33.333%。</p>
<p><img src="//dn-cnode.qbox.me/Fqm0dZ_CkXiIHo4lLhqyjvNhsd8B" alt="css"><br><a id="more"></a></p>
<h3 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h3><p>物理像素又被称为设备像素，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。正是这些设备像素的微小距离欺骗了我们肉眼看到的图像效果。</p>
<h3 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h3><p>设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用的虚拟像素(比如说CSS像素)，然后由相关系统转换为物理像素。</p>
<h3 id="CSS像素"><a href="#CSS像素" class="headerlink" title="CSS像素"></a>CSS像素</h3><p>CSS像素是一个抽像的单位，主要使用在浏览器上，用来精确度量Web页面上的内容。一般情况之下，CSS像素称为与设备无关的像素(device-independent pixel)，简称DIPs。</p>
<h3 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio)"></a>设备像素比(device pixel ratio)</h3><p>设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：</p>
<blockquote>
<p>设备像素比 ＝ 物理像素 / 设备独立像素</p>
</blockquote>
<h3 id="1、使用scale"><a href="#1、使用scale" class="headerlink" title="1、使用scale"></a>1、使用scale</h3><p>举个例子，现在要做一个上边框 <em>border-top</em> ，这里是用了伪类元素:before来模拟这条上边框，样式如下：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ～border-top</span></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.ui-border-top</span>:before &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: auto;</div><div class="line">  <span class="attribute">right</span>: auto;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#c8c7cc</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</div><div class="line">  <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就需要根据不同的屏来缩放大小，如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 2倍高清屏</span></div><div class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>)&#123;</div><div class="line">  <span class="selector-tag">div</span><span class="selector-class">.ui-border-top</span>:before &#123;</div><div class="line">    -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>); <span class="comment">//因为这里只需要缩放y轴</span></div><div class="line">  	<span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 3倍高清屏</span></div><div class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>)&#123;</div><div class="line">  <span class="selector-tag">div</span><span class="selector-class">.ui-border-top</span>:before &#123;</div><div class="line">    -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.33</span>);</div><div class="line">  	<span class="attribute">transform</span>: scaleY(<span class="number">0.33</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、使用gradient"><a href="#2、使用gradient" class="headerlink" title="2、使用gradient"></a>2、使用gradient</h3><p>这种方法的局限性比较大，因为需要使用到元素的背景属性，大概的思路就是利用渐变，来达到线条变小了的效果（其实只是看起来小了）。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio: 2)&#123;</div><div class="line">  <span class="selector-tag">div</span><span class="selector-class">.ui-border-top</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>; <span class="comment">//1px高度同样翻倍</span></div><div class="line">    <span class="attribute">background-repeat</span>: repeat-x;</div><div class="line">    <span class="attribute">background-position</span>: left top;</div><div class="line">    <span class="attribute">background-image</span>:  -webkit-linear-gradient(bottom, transparent, transparent, <span class="number">#ddd</span>); <span class="comment">//使用线性渐变，Linear Gradient (with Even Stops)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/hejx/pen/WrPBLm?editors=1100" target="_blank" rel="external">在线Demo</a></p>
<p>如果需要适配3倍高清屏，就需要把渐变再分细一层。</p>
<h3 id="3、制作圆角边框"><a href="#3、制作圆角边框" class="headerlink" title="3、制作圆角边框"></a>3、制作圆角边框</h3><p>同样使用伪类元素:before来代替。因为有圆角，所以上面提到的方法就行不通了，那么这里使用的方法就是制作一个2倍大小的元素（对应2倍高清屏），然后缩小一倍，来达到1px边框的效果。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio: 2)&#123;</div><div class="line">  <span class="selector-class">.ui-border-radius</span>:before &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200%</span>; <span class="comment">//2倍大小</span></div><div class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</div><div class="line">    -webkit-<span class="attribute">transform</span>: scale(<span class="number">0.5</span>); <span class="comment">//缩小50%</span></div><div class="line">    -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">1px</span>;</div><div class="line">    -webkit-<span class="attribute">box-sizing</span>: border-box;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</div><div class="line">    <span class="attribute">pointer-events</span>: none;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、-supports"><a href="#4、-supports" class="headerlink" title="4、@supports"></a>4、@supports</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@supports" target="_blank" rel="external">@supports</a>并不是规范，兼容性也不乐观。但在iOS9里，可以直接使用0.5px，还是非常方便的。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里随意写了个条件</span></div><div class="line"><span class="keyword">@supports</span>(<span class="attribute">display</span>: flex)&#123;</div><div class="line">	<span class="selector-class">.demo</span>&#123;</div><div class="line">		<span class="attribute">border</span>: <span class="number">0.5px</span> solid <span class="number">#ddd</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><p>整个实现的方法都是通过使用别的元素来模拟边框，然后根据不同的屏幕来缩放，建议使用伪类元素来替代，这样就不会影响到html的元素布局。（ps：以上的方法并未进行兼容测试，不过可以默认webkit内核的都可以，部分渣渣安卓手机可能也不太兼容！）</p>
<p><a href="http://frozenui.github.io/base.html#border" target="_blank" rel="external">参考资料：frozenui</a><br><a href="https://github.com/amfe/article/issues/17" target="_blank" rel="external">参考资料：Flexible</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为何会变粗&quot;&gt;&lt;a href=&quot;#为何会变粗&quot; class=&quot;headerlink&quot; title=&quot;为何会变粗&quot;&gt;&lt;/a&gt;为何会变粗&lt;/h3&gt;&lt;p&gt;如iphone 5s，2倍高清屏，css上使用的border:1px对应的是设备独立像素，而此时，这1px会被转成4个物理像素（放大2倍，如下图）。所以，在手机上看到的边框（横向）其实是占用了2个物理像素的高度（如果有对比的话，会非常明显感觉边框高了一倍）。同理在3倍高清屏上，也是一样。&lt;/p&gt;
&lt;p&gt;解决的方法都是差不多，使用其他元素来替代border，然后根据不同的屏幕来缩放大小，2倍就50%，3倍就33.333%。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//dn-cnode.qbox.me/Fqm0dZ_CkXiIHo4lLhqyjvNhsd8B&quot; alt=&quot;css&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="webapp" scheme="http://yoursite.com/tags/webapp/"/>
    
  </entry>
  
  <entry>
    <title>jane-test</title>
    <link href="http://yoursite.com/2016/02/07/jane-test/"/>
    <id>http://yoursite.com/2016/02/07/jane-test/</id>
    <published>2016-02-07T10:46:28.000Z</published>
    <updated>2016-02-26T06:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">test</span> = '<span class="keyword">test</span>';</div><div class="line">console.<span class="built_in">log</span>(<span class="keyword">test</span>);</div><div class="line"></div><div class="line"><span class="comment">//message</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = 0, len = 10; i &lt; len; i+=) &#123;</div><div class="line">	console.<span class="built_in">log</span>(i + 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p><a href="https://github.com/Alex-fun/hexo-theme-jane" target="_blank" rel="external">项目地址</a></p>
<h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p><img src="https://hexo.io/build/screenshots/jane-c5c7c338b3@2x.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-jane</title>
    <link href="http://yoursite.com/2016/02/07/hexo-theme-jane/"/>
    <id>http://yoursite.com/2016/02/07/hexo-theme-jane/</id>
    <published>2016-02-07T09:59:50.000Z</published>
    <updated>2016-02-07T10:15:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>这是一个极其简单的hexo主题，甚至说，她是不及格的。这完全是按照我自己的需求和想法来设计的一个主题，没有太多的功能，例如，没有搜索功能，没有海贼王和火影忍者，没有分享，也没有脸书和推特。因为，我只希望这仅仅是一个给自己记录文字的地方，所以，没有太多花俏的功能！</p>
<p>如果您也喜欢这样，欢迎您使用的我的主题！</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/</span>Alex-<span class="function"><span class="keyword">fun</span><span class="title">/</span></span>hexo-theme-jane.git themes/jane</div></pre></td></tr></table></figure>
<p>然后配置根目录的_config.yml文件（并非theme里的那个）</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">theme:</span> jane</div></pre></td></tr></table></figure>
<h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><p>因为tags是单独一个页面展示，所以需要手动添加，输入以下命令就可以了</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> page <span class="keyword">tags</span></div></pre></td></tr></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/jane</div><div class="line">git pull</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h3&gt;&lt;p&gt;这是一个极其简单的hexo主题，甚至说，她是不及格的。这完全是按照我自己的需求和想法来设计的一个主题，没有太多的功能，例如，没有搜索功能，没
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
